{
  "version": 3,
  "sources": ["../../../domain/models/Result.ts", "../../../services/config/ConfigService.ts", "../../../domain/schemas/SchemaRegistry.ts", "../../../domain/types/ErrorTypes.ts", "../../../../infrastructure/repositories/ConfigRepository.ts", "../../../../infrastructure/services/FileLogger.ts", "../../../../infrastructure/services/BasicEncryption.ts", "../../../services/config/ConfigFacade.ts", "../../../use-cases/config/GetConfig.ts", "../../../use-cases/config/UpdateConfig.ts", "../../../use-cases/config/ResetConfig.ts", "../../../use-cases/config/ExportConfig.ts", "../../../use-cases/config/ImportConfig.ts", "../../../services/scripts/ScriptService.ts", "../../../../infrastructure/repositories/ScriptRepository.ts", "../../../services/scripts/ScriptFacade.ts", "../../../use-cases/scripts/CreateScript.ts", "../../../use-cases/scripts/CreateScripts.ts", "../../../use-cases/scripts/GetScripts.ts", "../../../use-cases/scripts/GetScriptsByRootPath.ts", "../../../use-cases/scripts/UpdateScript.ts", "../../../use-cases/scripts/DeleteScript.ts", "../../../use-cases/scripts/DeleteScriptsByRootPath.ts", "../../../use-cases/scripts/ExportScripts.ts", "../../../use-cases/scripts/ImportScripts.ts", "../../../services/session/SessionService.ts", "../../../../infrastructure/repositories/SessionRepository.ts", "../../../../infrastructure/services/FileStorage.ts", "../../../services/session/SessionFacade.ts", "../../../use-cases/session/SaveSession.ts", "../../../use-cases/session/UpdateSession.ts", "../../../use-cases/session/ResumeSession.ts", "../../../use-cases/session/ListSessions.ts", "../../../use-cases/session/DeleteSession.ts", "../../../services/git/GitService.ts", "../../../../infrastructure/services/Terminal/TerminalService.ts", "../../../services/git/GitFacade.ts", "../../../use-cases/git/GetGitStatus.ts", "../../../use-cases/git/GetIsDirty.ts", "../../../use-cases/git/GetDirtyData.ts", "../../../use-cases/git/CreateStash.ts", "../../../use-cases/git/ApplyStash.ts", "../../../use-cases/git/ListStashes.ts", "../../../use-cases/git/DeleteStash.ts", "../../../use-cases/git/GetCurrentCommit.ts", "../../../use-cases/git/CommitChanges.ts", "../../../services/ide/IDEService.ts", "../../../../infrastructure/repositories/IDERepository.ts", "../../../../infrastructure/services/Terminal/TerminalFacade.ts", "../../../services/ide/IDEFacade.ts", "../../../use-cases/ide/OpenIDE.ts", "../../../use-cases/ide/OpenFiles.ts", "../../../use-cases/ide/GetAvailableIDEs.ts", "../../../domain/types/ErrorRegistry.ts", "../../../../infrastructure/services/CLILogger/CLILogger.ts", "../../../../infrastructure/services/CLILogger/CLILoggerFacade.ts"],
  "sourcesContent": ["export type Result<T, E = Error> = Success<T> | Failure<E>;\r\n\r\nexport interface Success<T> {\r\n  ok: true;\r\n  value: T;\r\n}\r\n\r\nexport interface Failure<E> {\r\n  ok: false;\r\n  error: E;\r\n}\r\n\r\n// Type guard functions\r\nexport function isSuccess<T, E = Error>(result: Result<T, E>): result is Success<T> {\r\n  return result.ok === true;\r\n}\r\n\r\nexport function isFailure<T, E = Error>(result: Result<T, E>): result is Failure<E> {\r\n  return result.ok === false;\r\n} ", "import { IConfigService, IConfigRepository } from '@codestate/core/domain/ports/IConfigService';\r\nimport { Config } from '@codestate/core/domain/models/Config';\r\nimport { Result, isSuccess, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\n\r\nexport class ConfigService implements IConfigService {\r\n  constructor(\r\n    private repository: IConfigRepository,\r\n    private logger: ILoggerService\r\n  ) {}\r\n\r\n  async getConfig(): Promise<Result<Config>> {\r\n    this.logger.debug('ConfigService.getConfig called');\r\n    const result = await this.repository.load();\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to get config', { error: result.error });\r\n    } else {\r\n      this.logger.log('Config loaded', {});\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async setConfig(config: Config): Promise<Result<void>> {\r\n    this.logger.debug('ConfigService.setConfig called');\r\n    const result = await this.repository.save(config);\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to save config', { error: result.error });\r\n    } else {\r\n      this.logger.log('Config saved', {});\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async updateConfig(partial: Partial<Config>): Promise<Result<Config>> {\r\n    this.logger.debug('ConfigService.updateConfig called', { partial });\r\n    const current = await this.repository.load();\r\n    if (isFailure(current)) {\r\n      this.logger.error('Failed to load config for update', { error: current.error });\r\n      return current;\r\n    }\r\n    const merged = { ...current.value, ...partial };\r\n    // TODO: Add validation/migration logic if needed\r\n    const saveResult = await this.repository.save(merged);\r\n    if (isFailure(saveResult)) {\r\n      this.logger.error('Failed to save updated config', { error: saveResult.error });\r\n      return { ok: false, error: saveResult.error };\r\n    }\r\n    this.logger.log('Config updated', {});\r\n    return { ok: true, value: merged };\r\n  }\r\n} ", "import { z } from 'zod';\r\n\r\n// Core schemas for configuration and validation\r\nexport const LogLevelSchema = z.enum(['ERROR', 'WARN', 'LOG', 'DEBUG']);\r\n\r\nexport const LoggerConfigSchema = z.object({\r\n  level: LogLevelSchema,\r\n  sinks: z.array(z.enum(['console', 'file'])),\r\n  filePath: z.string().optional(),\r\n});\r\n\r\nexport const FileStorageConfigSchema = z.object({\r\n  encryptionEnabled: z.boolean(),\r\n  encryptionKey: z.string().optional(),\r\n  dataDir: z.string(),\r\n});\r\n\r\nexport const FeatureFlagsSchema = z.object({\r\n  experimentalTui: z.boolean(),\r\n  experimentalIde: z.boolean(),\r\n  advancedSearch: z.boolean(),\r\n  cloudSync: z.boolean(),\r\n});\r\n\r\nexport const PluginEnvironmentSchema = z.enum(['cli', 'tui', 'ide']);\r\n\r\nexport const ErrorCodeSchema = z.enum([\r\n  'UNKNOWN',\r\n  'CONFIG_INVALID',\r\n  'STORAGE_INVALID_PATH',\r\n  'STORAGE_DECRYPTION_FAILED',\r\n  'STORAGE_READ_FAILED',\r\n  'STORAGE_WRITE_FAILED',\r\n  'STORAGE_DELETE_FAILED',\r\n  'ENCRYPTION_FAILED',\r\n  'ENCRYPTION_INVALID_FORMAT',\r\n  'SCRIPT_INVALID',\r\n  'SCRIPT_DUPLICATE',\r\n  'SCRIPT_NOT_FOUND',\r\n  'SCRIPT_PATH_INVALID',\r\n  'SCRIPT_MALICIOUS',\r\n  'GIT_NOT_REPOSITORY',\r\n  'GIT_COMMAND_FAILED',\r\n  'GIT_STASH_NOT_FOUND',\r\n  'GIT_STASH_CONFLICT',\r\n  'TERMINAL_COMMAND_FAILED',\r\n  'TERMINAL_TIMEOUT',\r\n  'TERMINAL_COMMAND_NOT_FOUND',\r\n]);\r\n\r\nexport const EncryptionConfigSchema = z.object({\r\n  enabled: z.boolean(),\r\n  encryptionKey: z.string().optional(),\r\n});\r\n\r\nexport const ConfigSchema = z.object({\r\n  version: z.string(),\r\n  ide: z.string(),\r\n  encryption: EncryptionConfigSchema,\r\n  storagePath: z.string(),\r\n  logger: LoggerConfigSchema,\r\n  experimental: z.record(z.string(), z.boolean()).optional(),\r\n  extensions: z.record(z.string(), z.unknown()).optional(),\r\n});\r\n\r\nexport const ScriptSchema = z.object({\r\n  name: z.string().min(1, 'Script name is required'),\r\n  rootPath: z.string().min(1, 'Root path is required'),\r\n  script: z.string().min(1, 'Script command is required'),\r\n});\r\n\r\nexport const ScriptIndexEntrySchema = z.object({\r\n  rootPath: z.string().min(1, 'Root path is required'),\r\n  referenceFile: z.string().min(1, 'Reference file path is required'),\r\n});\r\n\r\nexport const ScriptIndexSchema = z.object({\r\n  entries: z.array(ScriptIndexEntrySchema),\r\n});\r\n\r\nexport const ScriptCollectionSchema = z.object({\r\n  scripts: z.array(ScriptSchema),\r\n});\r\n\r\n// Git schemas\r\nexport const GitFileStatusSchema = z.enum(['modified', 'added', 'deleted', 'untracked', 'renamed', 'copied', 'updated']);\r\n\r\nexport const GitFileSchema = z.object({\r\n  path: z.string(),\r\n  status: GitFileStatusSchema,\r\n  staged: z.boolean(),\r\n});\r\n\r\nexport const GitStatusSchema = z.object({\r\n  isDirty: z.boolean(),\r\n  dirtyFiles: z.array(GitFileSchema),\r\n  newFiles: z.array(GitFileSchema),\r\n  modifiedFiles: z.array(GitFileSchema),\r\n  deletedFiles: z.array(GitFileSchema),\r\n  untrackedFiles: z.array(GitFileSchema),\r\n});\r\n\r\nexport const GitStashSchema = z.object({\r\n  id: z.string(),\r\n  name: z.string(),\r\n  message: z.string(),\r\n  timestamp: z.number(),\r\n  branch: z.string(),\r\n});\r\n\r\nexport const GitStashResultSchema = z.object({\r\n  success: z.boolean(),\r\n  stashId: z.string().optional(),\r\n  error: z.string().optional(),\r\n});\r\n\r\nexport const GitStashApplyResultSchema = z.object({\r\n  success: z.boolean(),\r\n  conflicts: z.array(z.string()).optional(),\r\n  error: z.string().optional(),\r\n});\r\n\r\n// Terminal schemas\r\nexport const TerminalCommandSchema = z.object({\r\n  command: z.string(),\r\n  args: z.array(z.string()).optional(),\r\n  cwd: z.string().optional(),\r\n  env: z.record(z.string(), z.string()).optional(),\r\n  timeout: z.number().optional(),\r\n});\r\n\r\nexport const TerminalResultSchema = z.object({\r\n  success: z.boolean(),\r\n  exitCode: z.number(),\r\n  stdout: z.string(),\r\n  stderr: z.string(),\r\n  duration: z.number(),\r\n  error: z.string().optional(),\r\n});\r\n\r\nexport const TerminalOptionsSchema = z.object({\r\n  cwd: z.string().optional(),\r\n  env: z.record(z.string(), z.string()).optional(),\r\n  timeout: z.number().optional(),\r\n  shell: z.string().optional(),\r\n});\r\n\r\n// Session schemas\r\nexport const FileStateSchema = z.object({\r\n  path: z.string(),\r\n  cursor: z\r\n    .object({ line: z.number(), column: z.number() })\r\n    .optional(),\r\n  scroll: z\r\n    .object({ top: z.number(), left: z.number() })\r\n    .optional(),\r\n  isActive: z.boolean(),\r\n});\r\n\r\nexport const GitStateSchema = z.object({\r\n  branch: z.string(),\r\n  commit: z.string(),\r\n  isDirty: z.boolean(),\r\n  stashId: z.string().nullable().optional(),\r\n});\r\n\r\nexport const SessionSchema = z.object({\r\n  id: z.string(),\r\n  name: z.string(),\r\n  projectRoot: z.string(),\r\n  createdAt: z.union([z.string(), z.date()]).transform(val => typeof val === 'string' ? new Date(val) : val),\r\n  updatedAt: z.union([z.string(), z.date()]).transform(val => typeof val === 'string' ? new Date(val) : val),\r\n  tags: z.array(z.string()),\r\n  notes: z.string().optional(),\r\n  files: z.array(FileStateSchema),\r\n  git: GitStateSchema,\r\n  extensions: z.record(z.string(), z.unknown()).optional(),\r\n});\r\n\r\n// Session index entry schema\r\nexport const SessionIndexEntrySchema = z.object({\r\n  id: z.string(),\r\n  name: z.string(),\r\n  projectRoot: z.string(),\r\n  createdAt: z.union([z.string(), z.date()]),\r\n  updatedAt: z.union([z.string(), z.date()]),\r\n  tags: z.array(z.string()),\r\n  notes: z.string().optional(),\r\n  referenceFile: z.string(),\r\n});\r\n\r\nexport const SessionIndexSchema = z.object({\r\n  version: z.string(),\r\n  sessions: z.array(SessionIndexEntrySchema),\r\n});\r\n\r\n// Schema registry for easy access and validation\r\nexport const SchemaRegistry = {\r\n  LogLevel: LogLevelSchema,\r\n  LoggerConfig: LoggerConfigSchema,\r\n  FileStorageConfig: FileStorageConfigSchema,\r\n  FeatureFlags: FeatureFlagsSchema,\r\n  PluginEnvironment: PluginEnvironmentSchema,\r\n  ErrorCode: ErrorCodeSchema,\r\n  Config: ConfigSchema,\r\n  Script: ScriptSchema,\r\n  ScriptIndexEntry: ScriptIndexEntrySchema,\r\n  ScriptIndex: ScriptIndexSchema,\r\n  ScriptCollection: ScriptCollectionSchema,\r\n  GitFileStatus: GitFileStatusSchema,\r\n  GitFile: GitFileSchema,\r\n  GitStatus: GitStatusSchema,\r\n  GitStash: GitStashSchema,\r\n  GitStashResult: GitStashResultSchema,\r\n  GitStashApplyResult: GitStashApplyResultSchema,\r\n  TerminalCommand: TerminalCommandSchema,\r\n  TerminalResult: TerminalResultSchema,\r\n  TerminalOptions: TerminalOptionsSchema,\r\n  FileState: FileStateSchema,\r\n  GitState: GitStateSchema,\r\n  Session: SessionSchema,\r\n  SessionIndexEntry: SessionIndexEntrySchema,\r\n  SessionIndex: SessionIndexSchema,\r\n} as const;\r\n\r\n// Type exports for use in TypeScript\r\nexport type LogLevel = z.infer<typeof LogLevelSchema>;\r\nexport type LoggerConfig = z.infer<typeof LoggerConfigSchema>;\r\nexport type FileStorageConfig = z.infer<typeof FileStorageConfigSchema>;\r\nexport type FeatureFlags = z.infer<typeof FeatureFlagsSchema>;\r\nexport type PluginEnvironment = z.infer<typeof PluginEnvironmentSchema>;\r\nexport type ErrorCode = z.infer<typeof ErrorCodeSchema>;\r\nexport type Config = z.infer<typeof ConfigSchema>;\r\nexport type Script = z.infer<typeof ScriptSchema>;\r\nexport type ScriptIndexEntry = z.infer<typeof ScriptIndexEntrySchema>;\r\nexport type ScriptIndex = z.infer<typeof ScriptIndexSchema>;\r\nexport type ScriptCollection = z.infer<typeof ScriptCollectionSchema>;\r\nexport type GitFileStatus = z.infer<typeof GitFileStatusSchema>;\r\nexport type GitFile = z.infer<typeof GitFileSchema>;\r\nexport type GitStatus = z.infer<typeof GitStatusSchema>;\r\nexport type GitStash = z.infer<typeof GitStashSchema>;\r\nexport type GitStashResult = z.infer<typeof GitStashResultSchema>;\r\nexport type GitStashApplyResult = z.infer<typeof GitStashApplyResultSchema>;\r\nexport type TerminalCommand = z.infer<typeof TerminalCommandSchema>;\r\nexport type TerminalResult = z.infer<typeof TerminalResultSchema>;\r\nexport type TerminalOptions = z.infer<typeof TerminalOptionsSchema>;\r\nexport type FileState = z.infer<typeof FileStateSchema>;\r\nexport type GitState = z.infer<typeof GitStateSchema>;\r\nexport type Session = z.infer<typeof SessionSchema>;\r\nexport type SessionIndexEntry = z.infer<typeof SessionIndexEntrySchema>;\r\nexport type SessionIndex = z.infer<typeof SessionIndexSchema>;\r\n\r\n// Validation helpers\r\nexport function validateLoggerConfig(data: unknown): LoggerConfig {\r\n  return LoggerConfigSchema.parse(data);\r\n}\r\n\r\nexport function validateFileStorageConfig(data: unknown): FileStorageConfig {\r\n  return FileStorageConfigSchema.parse(data);\r\n}\r\n\r\nexport function validateFeatureFlags(data: unknown): FeatureFlags {\r\n  return FeatureFlagsSchema.parse(data);\r\n}\r\n\r\nexport function validateConfig(data: unknown): Config {\r\n  return ConfigSchema.parse(data);\r\n}\r\n\r\nexport function validateScript(data: unknown): Script {\r\n  return ScriptSchema.parse(data);\r\n}\r\n\r\nexport function validateScriptIndex(data: unknown): ScriptIndex {\r\n  return ScriptIndexSchema.parse(data);\r\n}\r\n\r\nexport function validateScriptCollection(data: unknown): ScriptCollection {\r\n  return ScriptCollectionSchema.parse(data);\r\n}\r\n\r\nexport function validateGitStatus(data: unknown): GitStatus {\r\n  return GitStatusSchema.parse(data);\r\n}\r\n\r\nexport function validateGitStash(data: unknown): GitStash {\r\n  return GitStashSchema.parse(data);\r\n}\r\n\r\nexport function validateTerminalCommand(data: unknown): TerminalCommand {\r\n  return TerminalCommandSchema.parse(data);\r\n}\r\n\r\nexport function validateTerminalResult(data: unknown): TerminalResult {\r\n  return TerminalResultSchema.parse(data);\r\n}\r\n\r\nexport function validateSession(data: unknown): Session {\r\n  return SessionSchema.parse(data);\r\n}\r\n\r\nexport function validateSessionIndex(data: unknown): SessionIndex {\r\n  return SessionIndexSchema.parse(data);\r\n} ", "export enum ErrorCode {\r\n  UNKNOWN = 'UNKNOWN',\r\n  CONFIG_INVALID = 'CONFIG_INVALID',\r\n  STORAGE_INVALID_PATH = 'STORAGE_INVALID_PATH',\r\n  STORAGE_DECRYPTION_FAILED = 'STORAGE_DECRYPTION_FAILED',\r\n  STORAGE_READ_FAILED = 'STORAGE_READ_FAILED',\r\n  STORAGE_WRITE_FAILED = 'STORAGE_WRITE_FAILED',\r\n  STORAGE_DELETE_FAILED = 'STORAGE_DELETE_FAILED',\r\n  ENCRYPTION_FAILED = 'ENCRYPTION_FAILED',\r\n  ENCRYPTION_INVALID_FORMAT = 'ENCRYPTION_INVALID_FORMAT',\r\n  SCRIPT_INVALID = 'SCRIPT_INVALID',\r\n  SCRIPT_DUPLICATE = 'SCRIPT_DUPLICATE',\r\n  SCRIPT_NOT_FOUND = 'SCRIPT_NOT_FOUND',\r\n  SCRIPT_PATH_INVALID = 'SCRIPT_PATH_INVALID',\r\n  SCRIPT_MALICIOUS = 'SCRIPT_MALICIOUS',\r\n  GIT_NOT_REPOSITORY = 'GIT_NOT_REPOSITORY',\r\n  GIT_COMMAND_FAILED = 'GIT_COMMAND_FAILED',\r\n  GIT_STASH_NOT_FOUND = 'GIT_STASH_NOT_FOUND',\r\n  GIT_STASH_CONFLICT = 'GIT_STASH_CONFLICT',\r\n  TERMINAL_COMMAND_FAILED = 'TERMINAL_COMMAND_FAILED',\r\n  TERMINAL_TIMEOUT = 'TERMINAL_TIMEOUT',\r\n  TERMINAL_COMMAND_NOT_FOUND = 'TERMINAL_COMMAND_NOT_FOUND',\r\n}\r\n\r\nexport interface StandardizedErrorShape {\r\n  code: ErrorCode;\r\n  name: string;\r\n  message: string;\r\n  meta?: Record<string, unknown>;\r\n}\r\n\r\nexport class AppError extends Error implements StandardizedErrorShape {\r\n  code: ErrorCode;\r\n  meta?: Record<string, unknown>;\r\n  constructor(message: string, code: ErrorCode = ErrorCode.UNKNOWN, meta?: Record<string, unknown>) {\r\n    super(message);\r\n    this.name = 'AppError';\r\n    this.code = code;\r\n    this.meta = meta;\r\n  }\r\n}\r\n\r\nexport class ConfigError extends AppError {\r\n  constructor(message: string, meta?: Record<string, unknown>) {\r\n    super(message, ErrorCode.CONFIG_INVALID, meta);\r\n    this.name = 'ConfigError';\r\n  }\r\n}\r\n\r\nexport class StorageError extends AppError {\r\n  constructor(message: string, code: ErrorCode = ErrorCode.STORAGE_READ_FAILED, meta?: Record<string, unknown>) {\r\n    super(message, code, meta);\r\n    this.name = 'StorageError';\r\n  }\r\n}\r\n\r\nexport class EncryptionError extends AppError {\r\n  constructor(message: string, code: ErrorCode = ErrorCode.ENCRYPTION_FAILED, meta?: Record<string, unknown>) {\r\n    super(message, code, meta);\r\n    this.name = 'EncryptionError';\r\n  }\r\n}\r\n\r\nexport class ScriptError extends AppError {\r\n  constructor(message: string, code: ErrorCode = ErrorCode.SCRIPT_INVALID, meta?: Record<string, unknown>) {\r\n    super(message, code, meta);\r\n    this.name = 'ScriptError';\r\n  }\r\n}\r\n\r\nexport class GitError extends AppError {\r\n  constructor(message: string, code: ErrorCode = ErrorCode.GIT_COMMAND_FAILED, meta?: Record<string, unknown>) {\r\n    super(message, code, meta);\r\n    this.name = 'GitError';\r\n  }\r\n}\r\n\r\nexport class TerminalError extends AppError {\r\n  constructor(message: string, code: ErrorCode = ErrorCode.TERMINAL_COMMAND_FAILED, meta?: Record<string, unknown>) {\r\n    super(message, code, meta);\r\n    this.name = 'TerminalError';\r\n  }\r\n} ", "import { IConfigRepository } from '../../core/domain/ports/IConfigService';\r\nimport { Config } from '../../core/domain/models/Config';\r\nimport { Result, isFailure } from '../../core/domain/models/Result';\r\nimport { validateConfig } from '../../core/domain/schemas/SchemaRegistry';\r\nimport { ILoggerService } from '../../core/domain/ports/ILoggerService';\r\nimport { IEncryptionService } from '../../core/domain/ports/IEncryptionService';\r\nimport { ErrorRegistry, getUserMessageForErrorCode } from '../../core/domain/types/ErrorRegistry';\r\nimport { ConfigError } from '../../core/domain/types/ErrorTypes';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\n\r\nconst DEFAULT_CONFIG_PATH = path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate', 'config.json');\r\nconst TEMP_SUFFIX = '.tmp';\r\nconst BACKUP_SUFFIX = '.bak';\r\n\r\nfunction getDefaultConfig(): Config {\r\n  return {\r\n    version: '1.0.0',\r\n    ide: 'vscode',\r\n    encryption: { enabled: false },\r\n    storagePath: path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate'),\r\n    logger: { \r\n      level: 'LOG', \r\n      sinks: ['file'],\r\n      filePath: path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate', 'logs', 'codestate.log')\r\n    },\r\n    experimental: {},\r\n    extensions: {},\r\n  };\r\n}\r\n\r\nexport class ConfigRepository implements IConfigRepository {\r\n  constructor(\r\n    private logger: ILoggerService,\r\n    private encryption: IEncryptionService,\r\n    private configPath: string = DEFAULT_CONFIG_PATH\r\n  ) {}\r\n\r\n  async load(): Promise<Result<Config>> {\r\n    try {\r\n      await this.ensureDir();\r\n      this.logger.debug('Attempting to load config', { path: this.configPath });\r\n      const raw = await fs.readFile(this.configPath, { encoding: 'utf8' });\r\n      let data = raw;\r\n      // Try decrypt if header present or config says so\r\n      if (raw.startsWith('ENCRYPTED_v1')) {\r\n        this.logger.log('Config file is encrypted. Attempting decryption.', { path: this.configPath });\r\n        // Prompt for key or use env/config (not interactive here)\r\n        // For now, try with empty key and fail gracefully\r\n        const key = '';\r\n        const decrypted = await this.encryption.decrypt(raw, key);\r\n        if (isFailure(decrypted)) {\r\n          this.logger.error('Decryption failed', { error: decrypted.error });\r\n          return { ok: false, error: decrypted.error };\r\n        }\r\n        data = decrypted.value;\r\n      }\r\n      let parsed;\r\n      try {\r\n        parsed = JSON.parse(data);\r\n      } catch (parseErr) {\r\n        this.logger.error('Config file is corrupt (invalid JSON). Backing up and creating default.', { path: this.configPath });\r\n        await this.backupCorruptConfig();\r\n        const defaults = getDefaultConfig();\r\n        await this.save(defaults);\r\n        return { ok: true, value: defaults };\r\n      }\r\n      let config;\r\n      try {\r\n        config = validateConfig(parsed);\r\n      } catch (validationErr) {\r\n        this.logger.error('Config file is corrupt (schema validation failed). Backing up and creating default.', { path: this.configPath });\r\n        await this.backupCorruptConfig();\r\n        const defaults = getDefaultConfig();\r\n        await this.save(defaults);\r\n        return { ok: true, value: defaults };\r\n      }\r\n      this.logger.log('Config loaded successfully', { path: this.configPath, encrypted: raw.startsWith('ENCRYPTED_v1') });\r\n      return { ok: true, value: config };\r\n    } catch (err: any) {\r\n      if (err.code === 'ENOENT') {\r\n        this.logger.warn('Config file not found. Creating default config.', { path: this.configPath });\r\n        const defaults = getDefaultConfig();\r\n        await this.save(defaults);\r\n        return { ok: true, value: defaults };\r\n      }\r\n      this.logger.error('Failed to load config', { error: err.message, path: this.configPath });\r\n      return { ok: false, error: new ConfigError(err.message) };\r\n    }\r\n  }\r\n\r\n  async save(config: Config): Promise<Result<void>> {\r\n    try {\r\n      await this.ensureDir();\r\n      this.logger.debug('Attempting to save config', { path: this.configPath });\r\n      const validated = validateConfig(config);\r\n      let data = JSON.stringify(validated, null, 2);\r\n      let encrypted = false;\r\n      if (config.encryption?.enabled && config.encryption.encryptionKey) {\r\n        this.logger.log('Encrypting config before save', { path: this.configPath });\r\n        const encResult = await this.encryption.encrypt(data, config.encryption.encryptionKey);\r\n        if (isFailure(encResult)) {\r\n          this.logger.error('Encryption failed', { error: encResult.error });\r\n          return { ok: false, error: encResult.error };\r\n        }\r\n        data = encResult.value;\r\n        encrypted = true;\r\n      }\r\n      // Write to temp file\r\n      const tempPath = this.configPath + TEMP_SUFFIX;\r\n      await fs.writeFile(tempPath, data, { encoding: 'utf8', mode: 0o600 });\r\n      this.logger.debug('Temp config file written', { tempPath });\r\n      await fs.rename(this.configPath, this.configPath + BACKUP_SUFFIX).then(() => {\r\n        this.logger.log('Config backup created', { backupPath: this.configPath + BACKUP_SUFFIX });\r\n      }).catch(() => {}); // backup old\r\n      await fs.rename(tempPath, this.configPath); // atomic replace\r\n      this.logger.log('Config saved successfully', { path: this.configPath, encrypted });\r\n      return { ok: true, value: undefined };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to save config', { error: err.message, path: this.configPath });\r\n      return { ok: false, error: new ConfigError(err.message) };\r\n    }\r\n  }\r\n\r\n  private async ensureDir() {\r\n    const dir = path.dirname(this.configPath);\r\n    await fs.mkdir(dir, { recursive: true, mode: 0o700 }).then(() => {\r\n      this.logger.debug('Ensured config directory exists', { dir });\r\n    }).catch(() => {});\r\n  }\r\n\r\n  private async backupCorruptConfig() {\r\n    try {\r\n      const backupPath = this.configPath + '.bak.' + Date.now();\r\n      await fs.rename(this.configPath, backupPath);\r\n      this.logger.warn('Backed up corrupt config file', { backupPath });\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to backup corrupt config file', { error: err.message });\r\n    }\r\n  }\r\n} ", "import { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\nimport { LoggerConfig, LogLevel } from '@codestate/core/domain/schemas/SchemaRegistry';\r\nimport { appendFileSync, mkdirSync } from 'fs';\r\nimport * as path from 'path';\r\n\r\nconst LOG_LEVEL_PRIORITY = {\r\n  'ERROR': 0,\r\n  'WARN': 1,\r\n  'LOG': 2,\r\n  'DEBUG': 3,\r\n} as const;\r\n\r\nexport class FileLogger implements ILoggerService {\r\n  private level: LogLevel;\r\n  private filePath: string;\r\n\r\n  constructor(config: LoggerConfig) {\r\n    if (!config.filePath) throw new Error('FileLogger requires filePath in LoggerConfig');\r\n    this.level = config.level;\r\n    this.filePath = config.filePath;\r\n    this.ensureLogDirectory();\r\n  }\r\n  plainLog(message: string, meta?: Record<string, unknown>): void {\r\n    const entry = {\r\n      level: 'plain',\r\n      timestamp: new Date().toISOString(),\r\n      message,\r\n      ...(meta ? { meta } : {})\r\n    };\r\n    appendFileSync(this.filePath, JSON.stringify(entry) + '\\n', { encoding: 'utf8' });\r\n  }\r\n\r\n  private ensureLogDirectory(): void {\r\n    const logDir = path.dirname(this.filePath);\r\n    try {\r\n      mkdirSync(logDir, { recursive: true });\r\n    } catch (error) {\r\n      // Directory might already exist, which is fine\r\n    }\r\n  }\r\n\r\n  private shouldLog(messageLevel: LogLevel): boolean {\r\n    return LOG_LEVEL_PRIORITY[this.level] >= LOG_LEVEL_PRIORITY[messageLevel];\r\n  }\r\n\r\n  private write(level: string, message: string, meta?: Record<string, unknown>) {\r\n    const entry = {\r\n      level,\r\n      timestamp: new Date().toISOString(),\r\n      message,\r\n      ...(meta ? { meta } : {})\r\n    };\r\n    appendFileSync(this.filePath, JSON.stringify(entry) + '\\n', { encoding: 'utf8' });\r\n  }\r\n\r\n  log(message: string, meta?: Record<string, unknown>): void {\r\n    if (!this.shouldLog('LOG')) return;\r\n    this.write('log', message, meta);\r\n  }\r\n  error(message: string, meta?: Record<string, unknown>): void {\r\n    if (!this.shouldLog('ERROR')) return;\r\n    this.write('error', message, meta);\r\n  }\r\n  warn(message: string, meta?: Record<string, unknown>): void {\r\n    if (!this.shouldLog('WARN')) return;\r\n    this.write('warn', message, meta);\r\n  }\r\n  debug(message: string, meta?: Record<string, unknown>): void {\r\n    if (!this.shouldLog('DEBUG')) return;\r\n    this.write('debug', message, meta);\r\n  }\r\n} ", "import { IEncryptionService } from '../../core/domain/ports/IEncryptionService';\r\nimport { EncryptionError, ErrorCode } from '../../core/domain/types/ErrorTypes';\r\nimport { ILoggerService } from '../../core/domain/ports/ILoggerService';\r\nimport { Result } from '../../core/domain/models/Result';\r\nimport { randomBytes, pbkdf2Sync, createCipheriv, createDecipheriv } from 'crypto';\r\n\r\nconst HEADER = 'ENCRYPTED_v1';\r\nconst SALT_LENGTH = 16;\r\nconst IV_LENGTH = 12;\r\nconst KEY_LENGTH = 32; // 256 bits\r\nconst PBKDF2_ITER = 100_000;\r\n\r\nexport class BasicEncryption implements IEncryptionService {\r\n  constructor(private logger: ILoggerService) {}\r\n\r\n  async encrypt(data: string, key: string): Promise<Result<string, EncryptionError>> {\r\n    try {\r\n      const salt = randomBytes(SALT_LENGTH);\r\n      const iv = randomBytes(IV_LENGTH);\r\n      const derivedKey = pbkdf2Sync(key, salt, PBKDF2_ITER, KEY_LENGTH, 'sha512');\r\n      const cipher = createCipheriv('aes-256-gcm', derivedKey, iv);\r\n      const ciphertext = Buffer.concat([cipher.update(data, 'utf8'), cipher.final()]);\r\n      const authTag = cipher.getAuthTag();\r\n      this.logger.debug('Data encrypted', { algorithm: 'AES-256-GCM', operation: 'encrypt' });\r\n      return {\r\n        ok: true,\r\n        value: [\r\n          HEADER,\r\n          iv.toString('base64'),\r\n          salt.toString('base64'),\r\n          ciphertext.toString('base64'),\r\n          authTag.toString('base64')\r\n        ].join(':')\r\n      };\r\n    } catch (err) {\r\n      this.logger.error('Encryption failed', { error: err instanceof Error ? err.message : err, operation: 'encrypt' });\r\n      return { ok: false, error: new EncryptionError('Encryption failed', ErrorCode.ENCRYPTION_FAILED, { originalError: err instanceof Error ? err.message : err, operation: 'encrypt' }) };\r\n    }\r\n  }\r\n\r\n  async decrypt(data: string, key: string): Promise<Result<string, EncryptionError>> {\r\n    try {\r\n      const parts = data.split(':');\r\n      if (parts[0] !== HEADER || parts.length !== 5) {\r\n        this.logger.error('Invalid encrypted data format', { operation: 'decrypt' });\r\n        return { ok: false, error: new EncryptionError('Invalid encrypted data format', ErrorCode.ENCRYPTION_INVALID_FORMAT, { operation: 'decrypt' }) };\r\n      }\r\n      const [, ivB64, saltB64, ciphertextB64, authTagB64] = parts;\r\n      const iv = Buffer.from(ivB64, 'base64');\r\n      const salt = Buffer.from(saltB64, 'base64');\r\n      const ciphertext = Buffer.from(ciphertextB64, 'base64');\r\n      const authTag = Buffer.from(authTagB64, 'base64');\r\n      const derivedKey = pbkdf2Sync(key, salt, PBKDF2_ITER, KEY_LENGTH, 'sha512');\r\n      const decipher = createDecipheriv('aes-256-gcm', derivedKey, iv);\r\n      decipher.setAuthTag(authTag);\r\n      const plaintext = Buffer.concat([\r\n        decipher.update(ciphertext),\r\n        decipher.final()\r\n      ]);\r\n      this.logger.debug('Data decrypted', { algorithm: 'AES-256-GCM', operation: 'decrypt' });\r\n      return { ok: true, value: plaintext.toString('utf8') };\r\n    } catch (err) {\r\n      this.logger.error('Decryption failed', { error: err instanceof Error ? err.message : err, operation: 'decrypt' });\r\n      return { ok: false, error: new EncryptionError('Decryption failed', ErrorCode.ENCRYPTION_FAILED, { originalError: err instanceof Error ? err.message : err, operation: 'decrypt' }) };\r\n    }\r\n  }\r\n} ", "// Main entry point for CLI/IDE to interact with config (no DI required)\r\nimport { ConfigService } from '@codestate/core/services/config/ConfigService';\r\nimport { ConfigRepository } from '@codestate/infrastructure/repositories/ConfigRepository';\r\nimport { FileLogger } from '@codestate/infrastructure/services/FileLogger';\r\nimport { BasicEncryption } from '@codestate/infrastructure/services/BasicEncryption';\r\nimport { IConfigService } from '@codestate/core/domain/ports/IConfigService';\r\nimport { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\nimport { IEncryptionService } from '@codestate/core/domain/ports/IEncryptionService';\r\nimport * as path from 'path';\r\n\r\nexport class ConfigFacade implements IConfigService {\r\n  private service: ConfigService;\r\n\r\n  constructor(\r\n    configPath?: string,\r\n    logger?: ILoggerService,\r\n    encryption?: IEncryptionService\r\n  ) {\r\n    const _logger = logger || new FileLogger({ \r\n      level: 'LOG', \r\n      sinks: ['file'],\r\n      filePath: path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate', 'logs', 'codestate.log')\r\n    });\r\n    const _encryption = encryption || new BasicEncryption(_logger);\r\n    const repository = new ConfigRepository(_logger, _encryption, configPath);\r\n    this.service = new ConfigService(repository, _logger);\r\n  }\r\n\r\n  async getConfig(...args: Parameters<IConfigService['getConfig']>) {\r\n    return this.service.getConfig(...args);\r\n  }\r\n  async setConfig(...args: Parameters<IConfigService['setConfig']>) {\r\n    return this.service.setConfig(...args);\r\n  }\r\n  async updateConfig(...args: Parameters<IConfigService['updateConfig']>) {\r\n    return this.service.updateConfig(...args);\r\n  }\r\n} ", "import { IConfigService } from '@codestate/core/domain/ports/IConfigService';\r\nimport { Config } from '@codestate/core/domain/models/Config';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { ConfigFacade } from '@codestate/core/services/config/ConfigFacade';\r\n\r\nexport class GetConfig {\r\n  private configService: IConfigService;\r\n  constructor(configService?: IConfigService) {\r\n    this.configService = configService || new ConfigFacade();\r\n  }\r\n  async execute(): Promise<Result<Config>> {\r\n    return this.configService.getConfig();\r\n  }\r\n} ", "import { IConfigService } from '@codestate/core/domain/ports/IConfigService';\r\nimport { Config } from '@codestate/core/domain/models/Config';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { ConfigFacade } from '@codestate/core/services/config/ConfigFacade';\r\n\r\nexport class UpdateConfig {\r\n  private configService: IConfigService;\r\n  constructor(configService?: IConfigService) {\r\n    this.configService = configService || new ConfigFacade();\r\n  }\r\n  async execute(partial: Partial<Config>): Promise<Result<Config>> {\r\n    return this.configService.updateConfig(partial);\r\n  }\r\n} ", "import { IConfigService } from '@codestate/core/domain/ports/IConfigService';\r\nimport { Config } from '@codestate/core/domain/models/Config';\r\nimport { Result, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { ConfigFacade } from '@codestate/core/services/config/ConfigFacade';\r\nimport * as path from 'path';\r\n\r\nfunction getDefaultConfig(): Config {\r\n  return {\r\n    version: '1.0.0',\r\n    ide: 'vscode',\r\n    encryption: { enabled: false },\r\n    storagePath: path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate'),\r\n    logger: { \r\n      level: 'LOG', \r\n      sinks: ['file'],\r\n      filePath: path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate', 'logs', 'codestate.log')\r\n    },\r\n    experimental: {},\r\n    extensions: {},\r\n  };\r\n}\r\n\r\nexport class ResetConfig {\r\n  private configService: IConfigService;\r\n  constructor(configService?: IConfigService) {\r\n    this.configService = configService || new ConfigFacade();\r\n  }\r\n  async execute(): Promise<Result<Config>> {\r\n    const result = await this.configService.setConfig(getDefaultConfig());\r\n    if (isFailure(result)) return { ok: false, error: result.error };\r\n    return { ok: true, value: getDefaultConfig() };\r\n  }\r\n} ", "import { IConfigService } from '@codestate/core/domain/ports/IConfigService';\r\nimport { Result, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { ConfigFacade } from '@codestate/core/services/config/ConfigFacade';\r\n\r\nexport class ExportConfig {\r\n  private configService: IConfigService;\r\n  constructor(configService?: IConfigService) {\r\n    this.configService = configService || new ConfigFacade();\r\n  }\r\n  async execute(): Promise<Result<string>> {\r\n    const result = await this.configService.getConfig();\r\n    if (isFailure(result)) return { ok: false, error: result.error };\r\n    return { ok: true, value: JSON.stringify(result.value, null, 2) };\r\n  }\r\n} ", "import { IConfigService } from '@codestate/core/domain/ports/IConfigService';\r\nimport { Config } from '@codestate/core/domain/models/Config';\r\nimport { Result, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { validateConfig } from '@codestate/core/domain/schemas/SchemaRegistry';\r\nimport { ConfigFacade } from '@codestate/core/services/config/ConfigFacade';\r\n\r\nexport class ImportConfig {\r\n  private configService: IConfigService;\r\n  constructor(configService?: IConfigService) {\r\n    this.configService = configService || new ConfigFacade();\r\n  }\r\n  async execute(json: string): Promise<Result<Config>> {\r\n    let parsed: Config;\r\n    try {\r\n      parsed = validateConfig(JSON.parse(json));\r\n    } catch (err: any) {\r\n      return { ok: false, error: err };\r\n    }\r\n    const result = await this.configService.setConfig(parsed);\r\n    if (isFailure(result)) return { ok: false, error: result.error };\r\n    return { ok: true, value: parsed };\r\n  }\r\n} ", "import { IScriptService, IScriptRepository } from '../../domain/ports/IScriptService';\r\nimport { Script, ScriptIndex } from '../../domain/models/Script';\r\nimport { Result, isSuccess, isFailure } from '../../domain/models/Result';\r\nimport { ILoggerService } from '../../domain/ports/ILoggerService';\r\n\r\nexport class ScriptService implements IScriptService {\r\n  constructor(\r\n    private repository: IScriptRepository,\r\n    private logger: ILoggerService\r\n  ) {}\r\n\r\n  async createScript(script: Script): Promise<Result<void>> {\r\n    this.logger.debug('ScriptService.createScript called', { script });\r\n    const result = await this.repository.createScript(script);\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to create script', { error: result.error, script });\r\n    } else {\r\n      this.logger.log('Script created successfully', { script });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async createScripts(scripts: Script[]): Promise<Result<void>> {\r\n    this.logger.debug('ScriptService.createScripts called', { count: scripts.length });\r\n    const result = await this.repository.createScripts(scripts);\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to create scripts', { error: result.error, count: scripts.length });\r\n    } else {\r\n      this.logger.log('Scripts created successfully', { count: scripts.length });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async getScriptsByRootPath(rootPath: string): Promise<Result<Script[]>> {\r\n    this.logger.debug('ScriptService.getScriptsByRootPath called', { rootPath });\r\n    const result = await this.repository.getScriptsByRootPath(rootPath);\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to get scripts by root path', { error: result.error, rootPath });\r\n    } else {\r\n      this.logger.log('Scripts retrieved by root path', { rootPath, count: result.value.length });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async getAllScripts(): Promise<Result<Script[]>> {\r\n    this.logger.debug('ScriptService.getAllScripts called');\r\n    const result = await this.repository.getAllScripts();\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to get all scripts', { error: result.error });\r\n    } else {\r\n      this.logger.log('All scripts retrieved', { count: result.value.length });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async updateScript(name: string, rootPath: string, scriptUpdate: Partial<Script>): Promise<Result<void>> {\r\n    this.logger.debug('ScriptService.updateScript called', { name, rootPath, scriptUpdate });\r\n    const result = await this.repository.updateScript(name, rootPath, scriptUpdate);\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to update script', { error: result.error, name, rootPath });\r\n    } else {\r\n      this.logger.log('Script updated successfully', { name, rootPath });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async updateScripts(updates: Array<{ name: string; rootPath: string; script: Partial<Script> }>): Promise<Result<void>> {\r\n    this.logger.debug('ScriptService.updateScripts called', { count: updates.length });\r\n    const result = await this.repository.updateScripts(updates);\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to update scripts', { error: result.error, count: updates.length });\r\n    } else {\r\n      this.logger.log('Scripts updated successfully', { count: updates.length });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async deleteScript(name: string, rootPath: string): Promise<Result<void>> {\r\n    this.logger.debug('ScriptService.deleteScript called', { name, rootPath });\r\n    const result = await this.repository.deleteScript(name, rootPath);\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to delete script', { error: result.error, name, rootPath });\r\n    } else {\r\n      this.logger.log('Script deleted successfully', { name, rootPath });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async deleteScripts(scripts: Array<{ name: string; rootPath: string }>): Promise<Result<void>> {\r\n    this.logger.debug('ScriptService.deleteScripts called', { count: scripts.length });\r\n    const result = await this.repository.deleteScripts(scripts);\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to delete scripts', { error: result.error, count: scripts.length });\r\n    } else {\r\n      this.logger.log('Scripts deleted successfully', { count: scripts.length });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async deleteScriptsByRootPath(rootPath: string): Promise<Result<void>> {\r\n    this.logger.debug('ScriptService.deleteScriptsByRootPath called', { rootPath });\r\n    const result = await this.repository.deleteScriptsByRootPath(rootPath);\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to delete scripts by root path', { error: result.error, rootPath });\r\n    } else {\r\n      this.logger.log('Scripts deleted by root path successfully', { rootPath });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async getScriptIndex(): Promise<Result<ScriptIndex>> {\r\n    this.logger.debug('ScriptService.getScriptIndex called');\r\n    const result = await this.repository.loadScriptIndex();\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to get script index', { error: result.error });\r\n    } else {\r\n      this.logger.log('Script index retrieved', { entryCount: result.value.entries.length });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async updateScriptIndex(index: ScriptIndex): Promise<Result<void>> {\r\n    this.logger.debug('ScriptService.updateScriptIndex called');\r\n    const result = await this.repository.saveScriptIndex(index);\r\n    if (isFailure(result)) {\r\n      this.logger.error('Failed to update script index', { error: result.error });\r\n    } else {\r\n      this.logger.log('Script index updated successfully');\r\n    }\r\n    return result;\r\n  }\r\n} ", "import { IScriptRepository } from '../../core/domain/ports/IScriptService';\r\nimport { Script, ScriptIndex, ScriptCollection } from '../../core/domain/models/Script';\r\nimport { Result, isFailure } from '../../core/domain/models/Result';\r\nimport { validateScript, validateScriptIndex, validateScriptCollection } from '../../core/domain/schemas/SchemaRegistry';\r\nimport { ILoggerService } from '../../core/domain/ports/ILoggerService';\r\nimport { IEncryptionService } from '../../core/domain/ports/IEncryptionService';\r\nimport { IConfigService } from '../../core/domain/ports/IConfigService';\r\nimport { ScriptError, ErrorCode } from '../../core/domain/types/ErrorTypes';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\n\r\nconst DEFAULT_SCRIPTS_DIR = path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate', 'scripts');\r\nconst INDEX_FILE = 'index.json';\r\nconst TEMP_SUFFIX = '.tmp';\r\nconst BACKUP_SUFFIX = '.bak';\r\n\r\nexport class ScriptRepository implements IScriptRepository {\r\n  constructor(\r\n    private logger: ILoggerService,\r\n    private encryption: IEncryptionService,\r\n    private configService: IConfigService,\r\n    private scriptsDir: string = DEFAULT_SCRIPTS_DIR\r\n  ) {}\r\n\r\n  async createScript(script: Script): Promise<Result<void>> {\r\n    try {\r\n      await this.ensureScriptsDir();\r\n      \r\n      // Validate script\r\n      const validatedScript = validateScript(script);\r\n      \r\n      // Check if rootPath exists\r\n      if (!await this.pathExists(validatedScript.rootPath)) {\r\n        this.logger.error('Root path does not exist', { rootPath: validatedScript.rootPath });\r\n        return { ok: false, error: new ScriptError('Root path does not exist', ErrorCode.SCRIPT_PATH_INVALID, { rootPath: validatedScript.rootPath }) };\r\n      }\r\n      \r\n      // Check for duplicate script command\r\n      const existingScripts = await this.getScriptsByRootPath(validatedScript.rootPath);\r\n      if (existingScripts.ok) {\r\n        const duplicate = existingScripts.value.find(s => s.script === validatedScript.script);\r\n        if (duplicate) {\r\n          this.logger.error('Duplicate script command found', { script: validatedScript.script, rootPath: validatedScript.rootPath });\r\n          return { ok: false, error: new ScriptError('Script command already exists', ErrorCode.SCRIPT_DUPLICATE, { script: validatedScript.script, rootPath: validatedScript.rootPath }) };\r\n        }\r\n      }\r\n      \r\n      // Get or create script collection for this rootPath\r\n      const collection = await this.getOrCreateScriptCollection(validatedScript.rootPath);\r\n      if (isFailure(collection)) {\r\n        return { ok: false, error: collection.error };\r\n      }\r\n      \r\n      // Add script to collection\r\n      collection.value.scripts.push(validatedScript);\r\n      \r\n      // Save collection\r\n      const saveResult = await this.saveScriptCollection(validatedScript.rootPath, collection.value);\r\n      if (isFailure(saveResult)) {\r\n        return { ok: false, error: saveResult.error };\r\n      }\r\n      \r\n      // Update index\r\n      await this.updateIndexForRootPath(validatedScript.rootPath);\r\n      \r\n      this.logger.log('Script created successfully', { name: validatedScript.name, rootPath: validatedScript.rootPath });\r\n      return { ok: true, value: undefined };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to create script', { error: err.message, script });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  async createScripts(scripts: Script[]): Promise<Result<void>> {\r\n    try {\r\n      if (scripts.length === 0) {\r\n        return { ok: true, value: undefined };\r\n      }\r\n\r\n      this.logger.debug('Creating multiple scripts', { count: scripts.length });\r\n      \r\n      // Group scripts by rootPath for efficient processing\r\n      const scriptsByRootPath = new Map<string, Script[]>();\r\n      for (const script of scripts) {\r\n        const validatedScript = validateScript(script);\r\n        \r\n        // Check if rootPath exists\r\n        if (!await this.pathExists(validatedScript.rootPath)) {\r\n          this.logger.error('Root path does not exist', { rootPath: validatedScript.rootPath });\r\n          return { ok: false, error: new ScriptError('Root path does not exist', ErrorCode.SCRIPT_PATH_INVALID, { rootPath: validatedScript.rootPath }) };\r\n        }\r\n        \r\n        if (!scriptsByRootPath.has(validatedScript.rootPath)) {\r\n          scriptsByRootPath.set(validatedScript.rootPath, []);\r\n        }\r\n        scriptsByRootPath.get(validatedScript.rootPath)!.push(validatedScript);\r\n      }\r\n\r\n      // Process each rootPath group\r\n      for (const [rootPath, rootScripts] of scriptsByRootPath) {\r\n        // Get existing scripts for this rootPath\r\n        const existingScripts = await this.getScriptsByRootPath(rootPath);\r\n        const existingCollection = existingScripts.ok ? existingScripts.value : [];\r\n        \r\n        // Check for duplicates across existing and new scripts\r\n        const allScripts = [...existingCollection, ...rootScripts];\r\n        const scriptCommands = new Set<string>();\r\n        const duplicates: string[] = [];\r\n        \r\n        for (const script of allScripts) {\r\n          if (scriptCommands.has(script.script)) {\r\n            duplicates.push(script.script);\r\n          } else {\r\n            scriptCommands.add(script.script);\r\n          }\r\n        }\r\n        \r\n        if (duplicates.length > 0) {\r\n          this.logger.error('Duplicate script commands found', { duplicates, rootPath });\r\n          return { ok: false, error: new ScriptError('Duplicate script commands found', ErrorCode.SCRIPT_DUPLICATE, { duplicates, rootPath }) };\r\n        }\r\n        \r\n        // Create or update collection\r\n        const collection: ScriptCollection = { scripts: allScripts };\r\n        const saveResult = await this.saveScriptCollection(rootPath, collection);\r\n        if (isFailure(saveResult)) {\r\n          return { ok: false, error: saveResult.error };\r\n        }\r\n        \r\n        // Update index\r\n        await this.updateIndexForRootPath(rootPath);\r\n      }\r\n      \r\n      this.logger.log('Multiple scripts created successfully', { count: scripts.length });\r\n      return { ok: true, value: undefined };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to create multiple scripts', { error: err.message, count: scripts.length });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  async getScriptsByRootPath(rootPath: string): Promise<Result<Script[]>> {\r\n    try {\r\n      const collection = await this.loadScriptCollection(rootPath);\r\n      if (isFailure(collection)) {\r\n        return { ok: true, value: [] }; // Return empty array if no scripts exist\r\n      }\r\n      return { ok: true, value: collection.value.scripts };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to get scripts by root path', { error: err.message, rootPath });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  async getAllScripts(): Promise<Result<Script[]>> {\r\n    try {\r\n      const index = await this.loadScriptIndex();\r\n      if (isFailure(index)) {\r\n        return { ok: true, value: [] };\r\n      }\r\n      \r\n      const allScripts: Script[] = [];\r\n      for (const entry of index.value.entries) {\r\n        const scripts = await this.getScriptsByRootPath(entry.rootPath);\r\n        if (scripts.ok) {\r\n          allScripts.push(...scripts.value);\r\n        }\r\n      }\r\n      \r\n      return { ok: true, value: allScripts };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to get all scripts', { error: err.message });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  async updateScript(name: string, rootPath: string, scriptUpdate: Partial<Script>): Promise<Result<void>> {\r\n    try {\r\n      const scripts = await this.getScriptsByRootPath(rootPath);\r\n      if (isFailure(scripts)) {\r\n        return { ok: false, error: scripts.error };\r\n      }\r\n      \r\n      const scriptIndex = scripts.value.findIndex(s => s.name === name);\r\n      if (scriptIndex === -1) {\r\n        this.logger.error('Script not found', { name, rootPath });\r\n        return { ok: false, error: new ScriptError('Script not found', ErrorCode.SCRIPT_NOT_FOUND, { name, rootPath }) };\r\n      }\r\n      \r\n      // Update script\r\n      const updatedScript = { ...scripts.value[scriptIndex], ...scriptUpdate };\r\n      const validatedScript = validateScript(updatedScript);\r\n      \r\n      // Check for duplicate script command (excluding the current script)\r\n      const duplicate = scripts.value.find(s => s.script === validatedScript.script && s.name !== name);\r\n      if (duplicate) {\r\n        this.logger.error('Duplicate script command found', { script: validatedScript.script, rootPath });\r\n        return { ok: false, error: new ScriptError('Script command already exists', ErrorCode.SCRIPT_DUPLICATE, { script: validatedScript.script, rootPath }) };\r\n      }\r\n      \r\n      // Update in collection\r\n      scripts.value[scriptIndex] = validatedScript;\r\n      const collection: ScriptCollection = { scripts: scripts.value };\r\n      \r\n      // Save collection\r\n      const saveResult = await this.saveScriptCollection(rootPath, collection);\r\n      if (isFailure(saveResult)) {\r\n        return { ok: false, error: saveResult.error };\r\n      }\r\n      \r\n      this.logger.log('Script updated successfully', { name, rootPath });\r\n      return { ok: true, value: undefined };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to update script', { error: err.message, name, rootPath });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  async updateScripts(updates: Array<{ name: string; rootPath: string; script: Partial<Script> }>): Promise<Result<void>> {\r\n    try {\r\n      if (updates.length === 0) {\r\n        return { ok: true, value: undefined };\r\n      }\r\n\r\n      this.logger.debug('Updating multiple scripts', { count: updates.length });\r\n      \r\n      // Group updates by rootPath for efficient processing\r\n      const updatesByRootPath = new Map<string, Array<{ name: string; script: Partial<Script> }>>();\r\n      for (const update of updates) {\r\n        if (!updatesByRootPath.has(update.rootPath)) {\r\n          updatesByRootPath.set(update.rootPath, []);\r\n        }\r\n        updatesByRootPath.get(update.rootPath)!.push({ name: update.name, script: update.script });\r\n      }\r\n\r\n      // Process each rootPath group\r\n      for (const [rootPath, rootUpdates] of updatesByRootPath) {\r\n        const scripts = await this.getScriptsByRootPath(rootPath);\r\n        if (isFailure(scripts)) {\r\n          return { ok: false, error: scripts.error };\r\n        }\r\n        \r\n        const updatedScripts = [...scripts.value];\r\n        const updatedNames = new Set<string>();\r\n        \r\n        // Apply updates\r\n        for (const update of rootUpdates) {\r\n          const scriptIndex = updatedScripts.findIndex(s => s.name === update.name);\r\n          if (scriptIndex === -1) {\r\n            this.logger.error('Script not found for update', { name: update.name, rootPath });\r\n            return { ok: false, error: new ScriptError('Script not found', ErrorCode.SCRIPT_NOT_FOUND, { name: update.name, rootPath }) };\r\n          }\r\n          \r\n          // Update script\r\n          const updatedScript = { ...updatedScripts[scriptIndex], ...update.script };\r\n          const validatedScript = validateScript(updatedScript);\r\n          updatedScripts[scriptIndex] = validatedScript;\r\n          updatedNames.add(update.name);\r\n        }\r\n        \r\n        // Check for duplicates (excluding updated scripts)\r\n        const scriptCommands = new Set<string>();\r\n        const duplicates: string[] = [];\r\n        \r\n        for (const script of updatedScripts) {\r\n          if (scriptCommands.has(script.script)) {\r\n            if (!updatedNames.has(script.name)) {\r\n              duplicates.push(script.script);\r\n            }\r\n          } else {\r\n            scriptCommands.add(script.script);\r\n          }\r\n        }\r\n        \r\n        if (duplicates.length > 0) {\r\n          this.logger.error('Duplicate script commands found after updates', { duplicates, rootPath });\r\n          return { ok: false, error: new ScriptError('Duplicate script commands found', ErrorCode.SCRIPT_DUPLICATE, { duplicates, rootPath }) };\r\n        }\r\n        \r\n        // Save updated collection\r\n        const collection: ScriptCollection = { scripts: updatedScripts };\r\n        const saveResult = await this.saveScriptCollection(rootPath, collection);\r\n        if (isFailure(saveResult)) {\r\n          return { ok: false, error: saveResult.error };\r\n        }\r\n      }\r\n      \r\n      this.logger.log('Multiple scripts updated successfully', { count: updates.length });\r\n      return { ok: true, value: undefined };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to update multiple scripts', { error: err.message, count: updates.length });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  async deleteScript(name: string, rootPath: string): Promise<Result<void>> {\r\n    try {\r\n      const scripts = await this.getScriptsByRootPath(rootPath);\r\n      if (isFailure(scripts)) {\r\n        return { ok: false, error: scripts.error };\r\n      }\r\n      \r\n      const scriptIndex = scripts.value.findIndex(s => s.name === name);\r\n      if (scriptIndex === -1) {\r\n        this.logger.error('Script not found', { name, rootPath });\r\n        return { ok: false, error: new ScriptError('Script not found', ErrorCode.SCRIPT_NOT_FOUND, { name, rootPath }) };\r\n      }\r\n      \r\n      // Remove script from collection\r\n      scripts.value.splice(scriptIndex, 1);\r\n      const collection: ScriptCollection = { scripts: scripts.value };\r\n      \r\n      // Save collection\r\n      const saveResult = await this.saveScriptCollection(rootPath, collection);\r\n      if (isFailure(saveResult)) {\r\n        return { ok: false, error: saveResult.error };\r\n      }\r\n      \r\n      this.logger.log('Script deleted successfully', { name, rootPath });\r\n      return { ok: true, value: undefined };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to delete script', { error: err.message, name, rootPath });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  async deleteScripts(scripts: Array<{ name: string; rootPath: string }>): Promise<Result<void>> {\r\n    try {\r\n      if (scripts.length === 0) {\r\n        return { ok: true, value: undefined };\r\n      }\r\n\r\n      this.logger.debug('Deleting multiple scripts', { count: scripts.length });\r\n      \r\n      // Group deletions by rootPath for efficient processing\r\n      const deletionsByRootPath = new Map<string, string[]>();\r\n      for (const script of scripts) {\r\n        if (!deletionsByRootPath.has(script.rootPath)) {\r\n          deletionsByRootPath.set(script.rootPath, []);\r\n        }\r\n        deletionsByRootPath.get(script.rootPath)!.push(script.name);\r\n      }\r\n\r\n      // Process each rootPath group\r\n      for (const [rootPath, scriptNames] of deletionsByRootPath) {\r\n        const existingScripts = await this.getScriptsByRootPath(rootPath);\r\n        if (isFailure(existingScripts)) {\r\n          return { ok: false, error: existingScripts.error };\r\n        }\r\n        \r\n        const remainingScripts = existingScripts.value.filter(script => !scriptNames.includes(script.name));\r\n        \r\n        // Check if all requested scripts were found\r\n        const foundNames = existingScripts.value.filter(script => scriptNames.includes(script.name)).map(s => s.name);\r\n        const missingNames = scriptNames.filter(name => !foundNames.includes(name));\r\n        \r\n        if (missingNames.length > 0) {\r\n          this.logger.error('Some scripts not found for deletion', { missingNames, rootPath });\r\n          return { ok: false, error: new ScriptError('Some scripts not found', ErrorCode.SCRIPT_NOT_FOUND, { missingNames, rootPath }) };\r\n        }\r\n        \r\n        // Save updated collection\r\n        const collection: ScriptCollection = { scripts: remainingScripts };\r\n        const saveResult = await this.saveScriptCollection(rootPath, collection);\r\n        if (isFailure(saveResult)) {\r\n          return { ok: false, error: saveResult.error };\r\n        }\r\n      }\r\n      \r\n      this.logger.log('Multiple scripts deleted successfully', { count: scripts.length });\r\n      return { ok: true, value: undefined };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to delete multiple scripts', { error: err.message, count: scripts.length });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  async deleteScriptsByRootPath(rootPath: string): Promise<Result<void>> {\r\n    try {\r\n      const referenceFile = await this.getReferenceFilePath(rootPath);\r\n      if (referenceFile) {\r\n        await fs.unlink(referenceFile).catch(() => {}); // Ignore if file doesn't exist\r\n      }\r\n      \r\n      // Remove from index\r\n      await this.removeFromIndex(rootPath);\r\n      \r\n      this.logger.log('Scripts deleted for root path', { rootPath });\r\n      return { ok: true, value: undefined };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to delete scripts by root path', { error: err.message, rootPath });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  async loadScriptIndex(): Promise<Result<ScriptIndex>> {\r\n    try {\r\n      await this.ensureScriptsDir();\r\n      const indexPath = path.join(this.scriptsDir, INDEX_FILE);\r\n      \r\n      try {\r\n        const raw = await fs.readFile(indexPath, { encoding: 'utf8' });\r\n        let data = raw;\r\n        \r\n        // Check if encrypted\r\n        if (raw.startsWith('ENCRYPTED_v1')) {\r\n          const config = await this.configService.getConfig();\r\n          if (config.ok && config.value.encryption?.enabled && config.value.encryption.encryptionKey) {\r\n            const decrypted = await this.encryption.decrypt(raw, config.value.encryption.encryptionKey);\r\n            if (isFailure(decrypted)) {\r\n              this.logger.error('Failed to decrypt script index', { error: decrypted.error });\r\n              return { ok: false, error: decrypted.error };\r\n            }\r\n            data = decrypted.value;\r\n          }\r\n        }\r\n        \r\n        const parsed = JSON.parse(data);\r\n        const index = validateScriptIndex(parsed);\r\n        this.logger.debug('Script index loaded', { indexPath });\r\n        return { ok: true, value: index };\r\n      } catch (err: any) {\r\n        if (err.code === 'ENOENT') {\r\n          // Create default index\r\n          const defaultIndex: ScriptIndex = { entries: [] };\r\n          await this.saveScriptIndex(defaultIndex);\r\n          return { ok: true, value: defaultIndex };\r\n        }\r\n        throw err;\r\n      }\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to load script index', { error: err.message });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  async saveScriptIndex(index: ScriptIndex): Promise<Result<void>> {\r\n    try {\r\n      await this.ensureScriptsDir();\r\n      const indexPath = path.join(this.scriptsDir, INDEX_FILE);\r\n      \r\n      const validated = validateScriptIndex(index);\r\n      let data = JSON.stringify(validated, null, 2);\r\n      let encrypted = false;\r\n      \r\n      // Check if encryption is enabled\r\n      const config = await this.configService.getConfig();\r\n      if (config.ok && config.value.encryption?.enabled && config.value.encryption.encryptionKey) {\r\n        const encResult = await this.encryption.encrypt(data, config.value.encryption.encryptionKey);\r\n        if (isFailure(encResult)) {\r\n          this.logger.error('Failed to encrypt script index', { error: encResult.error });\r\n          return { ok: false, error: encResult.error };\r\n        }\r\n        data = encResult.value;\r\n        encrypted = true;\r\n      }\r\n      \r\n      // Atomic write\r\n      const tempPath = indexPath + TEMP_SUFFIX;\r\n      await fs.writeFile(tempPath, data, { encoding: 'utf8', mode: 0o600 });\r\n      await fs.rename(indexPath, indexPath + BACKUP_SUFFIX).catch(() => {});\r\n      await fs.rename(tempPath, indexPath);\r\n      \r\n      this.logger.log('Script index saved', { indexPath, encrypted });\r\n      return { ok: true, value: undefined };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to save script index', { error: err.message });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  // Private helper methods\r\n  private async ensureScriptsDir() {\r\n    await fs.mkdir(this.scriptsDir, { recursive: true, mode: 0o700 });\r\n  }\r\n\r\n  private async pathExists(pathToCheck: string): Promise<boolean> {\r\n    try {\r\n      await fs.access(pathToCheck);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async getOrCreateScriptCollection(rootPath: string): Promise<Result<ScriptCollection>> {\r\n    const collection = await this.loadScriptCollection(rootPath);\r\n    if (collection.ok) {\r\n      return collection;\r\n    }\r\n    return { ok: true, value: { scripts: [] } };\r\n  }\r\n\r\n  private async loadScriptCollection(rootPath: string): Promise<Result<ScriptCollection>> {\r\n    try {\r\n      const referenceFile = await this.getReferenceFilePath(rootPath);\r\n      if (!referenceFile) {\r\n        return { ok: false, error: new ScriptError('Reference file not found', ErrorCode.SCRIPT_NOT_FOUND, { rootPath }) };\r\n      }\r\n      \r\n      const raw = await fs.readFile(referenceFile, { encoding: 'utf8' });\r\n      let data = raw;\r\n      \r\n      // Check if encrypted\r\n      if (raw.startsWith('ENCRYPTED_v1')) {\r\n        const config = await this.configService.getConfig();\r\n        if (config.ok && config.value.encryption?.enabled && config.value.encryption.encryptionKey) {\r\n          const decrypted = await this.encryption.decrypt(raw, config.value.encryption.encryptionKey);\r\n          if (isFailure(decrypted)) {\r\n            this.logger.error('Failed to decrypt script collection', { error: decrypted.error });\r\n            return { ok: false, error: decrypted.error };\r\n          }\r\n          data = decrypted.value;\r\n        }\r\n      }\r\n      \r\n      const parsed = JSON.parse(data);\r\n      const collection = validateScriptCollection(parsed);\r\n      return { ok: true, value: collection };\r\n    } catch (err: any) {\r\n      if (err.code === 'ENOENT') {\r\n        return { ok: false, error: new ScriptError('Script collection not found', ErrorCode.SCRIPT_NOT_FOUND, { rootPath }) };\r\n      }\r\n      this.logger.error('Failed to load script collection', { error: err.message, rootPath });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  private async saveScriptCollection(rootPath: string, collection: ScriptCollection): Promise<Result<void>> {\r\n    try {\r\n      const validated = validateScriptCollection(collection);\r\n      let data = JSON.stringify(validated, null, 2);\r\n      let encrypted = false;\r\n      \r\n      // Check if encryption is enabled\r\n      const config = await this.configService.getConfig();\r\n      if (config.ok && config.value.encryption?.enabled && config.value.encryption.encryptionKey) {\r\n        const encResult = await this.encryption.encrypt(data, config.value.encryption.encryptionKey);\r\n        if (isFailure(encResult)) {\r\n          this.logger.error('Failed to encrypt script collection', { error: encResult.error });\r\n          return { ok: false, error: encResult.error };\r\n        }\r\n        data = encResult.value;\r\n        encrypted = true;\r\n      }\r\n      \r\n      const referenceFile = await this.getOrCreateReferenceFilePath(rootPath);\r\n      const tempPath = referenceFile + TEMP_SUFFIX;\r\n      await fs.writeFile(tempPath, data, { encoding: 'utf8', mode: 0o600 });\r\n      await fs.rename(referenceFile, referenceFile + BACKUP_SUFFIX).catch(() => {});\r\n      await fs.rename(tempPath, referenceFile);\r\n      \r\n      this.logger.debug('Script collection saved', { referenceFile, encrypted });\r\n      return { ok: true, value: undefined };\r\n    } catch (err: any) {\r\n      this.logger.error('Failed to save script collection', { error: err.message, rootPath });\r\n      return { ok: false, error: new ScriptError(err.message, ErrorCode.SCRIPT_INVALID, { originalError: err.message }) };\r\n    }\r\n  }\r\n\r\n  private async getReferenceFilePath(rootPath: string): Promise<string | null> {\r\n    const index = await this.loadScriptIndex();\r\n    if (isFailure(index)) {\r\n      return null;\r\n    }\r\n    \r\n    const entry = index.value.entries.find(e => e.rootPath === rootPath);\r\n    return entry ? path.join(this.scriptsDir, entry.referenceFile) : null;\r\n  }\r\n\r\n  private async getOrCreateReferenceFilePath(rootPath: string): Promise<string> {\r\n    const existingPath = await this.getReferenceFilePath(rootPath);\r\n    if (existingPath) {\r\n      return existingPath;\r\n    }\r\n    \r\n    // Create new reference file path\r\n    const fileName = `${Buffer.from(rootPath).toString('base64').replace(/[^a-zA-Z0-9]/g, '')}.json`;\r\n    return path.join(this.scriptsDir, fileName);\r\n  }\r\n\r\n  private async updateIndexForRootPath(rootPath: string): Promise<void> {\r\n    const index = await this.loadScriptIndex();\r\n    if (isFailure(index)) {\r\n      return;\r\n    }\r\n    \r\n    const referenceFile = await this.getOrCreateReferenceFilePath(rootPath);\r\n    const relativePath = path.relative(this.scriptsDir, referenceFile);\r\n    \r\n    // Check if entry already exists\r\n    const existingIndex = index.value.entries.findIndex(e => e.rootPath === rootPath);\r\n    if (existingIndex >= 0) {\r\n      index.value.entries[existingIndex].referenceFile = relativePath;\r\n    } else {\r\n      index.value.entries.push({ rootPath, referenceFile: relativePath });\r\n    }\r\n    \r\n    await this.saveScriptIndex(index.value);\r\n  }\r\n\r\n  private async removeFromIndex(rootPath: string): Promise<void> {\r\n    const index = await this.loadScriptIndex();\r\n    if (isFailure(index)) {\r\n      return;\r\n    }\r\n    \r\n    index.value.entries = index.value.entries.filter(e => e.rootPath !== rootPath);\r\n    await this.saveScriptIndex(index.value);\r\n  }\r\n} ", "// Main entry point for CLI/IDE to interact with scripts (no DI required)\r\nimport { ScriptService } from '@codestate/core/services/scripts/ScriptService';\r\nimport { ScriptRepository } from '@codestate/infrastructure/repositories/ScriptRepository';\r\nimport { FileLogger } from '@codestate/infrastructure/services/FileLogger';\r\nimport { BasicEncryption } from '@codestate/infrastructure/services/BasicEncryption';\r\nimport { ConfigFacade } from '@codestate/core/services/config/ConfigFacade';\r\nimport { IScriptService } from '@codestate/core/domain/ports/IScriptService';\r\nimport { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\nimport { IEncryptionService } from '@codestate/core/domain/ports/IEncryptionService';\r\nimport { IConfigService } from '@codestate/core/domain/ports/IConfigService';\r\nimport * as path from 'path';\r\n\r\nexport class ScriptFacade implements IScriptService {\r\n  private service: ScriptService;\r\n\r\n  constructor(\r\n    scriptsDir?: string,\r\n    logger?: ILoggerService,\r\n    encryption?: IEncryptionService,\r\n    configService?: IConfigService\r\n  ) {\r\n    const _logger = logger || new FileLogger({ \r\n      level: 'LOG', \r\n      sinks: ['file'],\r\n      filePath: path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate', 'logs', 'codestate.log')\r\n    });\r\n    const _encryption = encryption || new BasicEncryption(_logger);\r\n    const _configService = configService || new ConfigFacade();\r\n    const repository = new ScriptRepository(_logger, _encryption, _configService, scriptsDir);\r\n    this.service = new ScriptService(repository, _logger);\r\n  }\r\n\r\n  async createScript(...args: Parameters<IScriptService['createScript']>) {\r\n    return this.service.createScript(...args);\r\n  }\r\n\r\n  async createScripts(...args: Parameters<IScriptService['createScripts']>) {\r\n    return this.service.createScripts(...args);\r\n  }\r\n\r\n  async getScriptsByRootPath(...args: Parameters<IScriptService['getScriptsByRootPath']>) {\r\n    return this.service.getScriptsByRootPath(...args);\r\n  }\r\n\r\n  async getAllScripts(...args: Parameters<IScriptService['getAllScripts']>) {\r\n    return this.service.getAllScripts(...args);\r\n  }\r\n\r\n  async updateScript(...args: Parameters<IScriptService['updateScript']>) {\r\n    return this.service.updateScript(...args);\r\n  }\r\n\r\n  async updateScripts(...args: Parameters<IScriptService['updateScripts']>) {\r\n    return this.service.updateScripts(...args);\r\n  }\r\n\r\n  async deleteScript(...args: Parameters<IScriptService['deleteScript']>) {\r\n    return this.service.deleteScript(...args);\r\n  }\r\n\r\n  async deleteScripts(...args: Parameters<IScriptService['deleteScripts']>) {\r\n    return this.service.deleteScripts(...args);\r\n  }\r\n\r\n  async deleteScriptsByRootPath(...args: Parameters<IScriptService['deleteScriptsByRootPath']>) {\r\n    return this.service.deleteScriptsByRootPath(...args);\r\n  }\r\n\r\n  async getScriptIndex(...args: Parameters<IScriptService['getScriptIndex']>) {\r\n    return this.service.getScriptIndex(...args);\r\n  }\r\n\r\n  async updateScriptIndex(...args: Parameters<IScriptService['updateScriptIndex']>) {\r\n    return this.service.updateScriptIndex(...args);\r\n  }\r\n} ", "import { IScriptService } from '@codestate/core/domain/ports/IScriptService';\r\nimport { Script } from '@codestate/core/domain/models/Script';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { ScriptFacade } from '@codestate/core/services/scripts/ScriptFacade';\r\n\r\nexport class CreateScript {\r\n  private scriptService: IScriptService;\r\n  \r\n  constructor(scriptService?: IScriptService) {\r\n    this.scriptService = scriptService || new ScriptFacade();\r\n  }\r\n  \r\n  async execute(script: Script): Promise<Result<void>> {\r\n    return this.scriptService.createScript(script);\r\n  }\r\n} ", "import { IScriptService } from '@codestate/core/domain/ports/IScriptService';\r\nimport { Script } from '@codestate/core/domain/models/Script';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { ScriptFacade } from '@codestate/core/services/scripts/ScriptFacade';\r\n\r\nexport class CreateScripts {\r\n  private scriptService: IScriptService;\r\n  \r\n  constructor(scriptService?: IScriptService) {\r\n    this.scriptService = scriptService || new ScriptFacade();\r\n  }\r\n  \r\n  async execute(scripts: Script[]): Promise<Result<void>> {\r\n    return this.scriptService.createScripts(scripts);\r\n  }\r\n} ", "import { IScriptService } from '@codestate/core/domain/ports/IScriptService';\r\nimport { Script } from '@codestate/core/domain/models/Script';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { ScriptFacade } from '@codestate/core/services/scripts/ScriptFacade';\r\n\r\nexport class GetScripts {\r\n  private scriptService: IScriptService;\r\n  \r\n  constructor(scriptService?: IScriptService) {\r\n    this.scriptService = scriptService || new ScriptFacade();\r\n  }\r\n  \r\n  async execute(): Promise<Result<Script[]>> {\r\n    return this.scriptService.getAllScripts();\r\n  }\r\n} ", "import { IScriptService } from '@codestate/core/domain/ports/IScriptService';\r\nimport { Script } from '@codestate/core/domain/models/Script';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { ScriptFacade } from '@codestate/core/services/scripts/ScriptFacade';\r\n\r\nexport class GetScriptsByRootPath {\r\n  private scriptService: IScriptService;\r\n  \r\n  constructor(scriptService?: IScriptService) {\r\n    this.scriptService = scriptService || new ScriptFacade();\r\n  }\r\n  \r\n  async execute(rootPath: string): Promise<Result<Script[]>> {\r\n    return this.scriptService.getScriptsByRootPath(rootPath);\r\n  }\r\n} ", "import { IScriptService } from '@codestate/core/domain/ports/IScriptService';\r\nimport { Script } from '@codestate/core/domain/models/Script';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { ScriptFacade } from '@codestate/core/services/scripts/ScriptFacade';\r\n\r\nexport class UpdateScript {\r\n  private scriptService: IScriptService;\r\n  \r\n  constructor(scriptService?: IScriptService) {\r\n    this.scriptService = scriptService || new ScriptFacade();\r\n  }\r\n  \r\n  async execute(name: string, rootPath: string, scriptUpdate: Partial<Script>): Promise<Result<void>> {\r\n    return this.scriptService.updateScript(name, rootPath, scriptUpdate);\r\n  }\r\n} ", "import { IScriptService } from '@codestate/core/domain/ports/IScriptService';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { ScriptFacade } from '@codestate/core/services/scripts/ScriptFacade';\r\n\r\nexport class DeleteScript {\r\n  private scriptService: IScriptService;\r\n  \r\n  constructor(scriptService?: IScriptService) {\r\n    this.scriptService = scriptService || new ScriptFacade();\r\n  }\r\n  \r\n  async execute(name: string, rootPath: string): Promise<Result<void>> {\r\n    return this.scriptService.deleteScript(name, rootPath);\r\n  }\r\n} ", "import { IScriptService } from '@codestate/core/domain/ports/IScriptService';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { ScriptFacade } from '@codestate/core/services/scripts/ScriptFacade';\r\n\r\nexport class DeleteScriptsByRootPath {\r\n  private scriptService: IScriptService;\r\n  \r\n  constructor(scriptService?: IScriptService) {\r\n    this.scriptService = scriptService || new ScriptFacade();\r\n  }\r\n  \r\n  async execute(rootPath: string): Promise<Result<void>> {\r\n    return this.scriptService.deleteScriptsByRootPath(rootPath);\r\n  }\r\n} ", "import { IScriptService } from '@codestate/core/domain/ports/IScriptService';\r\nimport { Result, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { ScriptFacade } from '@codestate/core/services/scripts/ScriptFacade';\r\n\r\nexport class ExportScripts {\r\n  private scriptService: IScriptService;\r\n  \r\n  constructor(scriptService?: IScriptService) {\r\n    this.scriptService = scriptService || new ScriptFacade();\r\n  }\r\n  \r\n  async execute(): Promise<Result<string>> {\r\n    const result = await this.scriptService.getAllScripts();\r\n    if (isFailure(result)) return { ok: false, error: result.error };\r\n    return { ok: true, value: JSON.stringify(result.value, null, 2) };\r\n  }\r\n} ", "import { IScriptService } from '@codestate/core/domain/ports/IScriptService';\r\nimport { Script } from '@codestate/core/domain/models/Script';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { ScriptFacade } from '@codestate/core/services/scripts/ScriptFacade';\r\nimport { validateScript } from '@codestate/core/domain/schemas/SchemaRegistry';\r\n\r\nexport class ImportScripts {\r\n  private scriptService: IScriptService;\r\n  \r\n  constructor(scriptService?: IScriptService) {\r\n    this.scriptService = scriptService || new ScriptFacade();\r\n  }\r\n  \r\n  async execute(json: string): Promise<Result<void>> {\r\n    try {\r\n      const parsed = JSON.parse(json);\r\n      if (!Array.isArray(parsed)) {\r\n        return { ok: false, error: new Error('Invalid format: expected array of scripts') };\r\n      }\r\n      \r\n      const scripts: Script[] = [];\r\n      for (const item of parsed) {\r\n        try {\r\n          const validatedScript = validateScript(item);\r\n          scripts.push(validatedScript);\r\n        } catch (validationError) {\r\n          return { ok: false, error: new Error(`Invalid script format: ${validationError}`) };\r\n        }\r\n      }\r\n      \r\n      return this.scriptService.createScripts(scripts);\r\n    } catch (parseError) {\r\n      return { ok: false, error: new Error(`Invalid JSON: ${parseError}`) };\r\n    }\r\n  }\r\n} ", "import { ISessionService } from '../../domain/ports/ISessionService';\r\nimport { Session } from '../../domain/models/Session';\r\nimport { Result, isFailure } from '../../domain/models/Result';\r\nimport { SessionRepository } from '@codestate/infrastructure/repositories/SessionRepository';\r\nimport { SessionIndexEntry } from '../../domain/schemas/SchemaRegistry';\r\n\r\nexport class SessionService implements ISessionService {\r\n  private repository: SessionRepository;\r\n\r\n  constructor(repository: SessionRepository) {\r\n    this.repository = repository;\r\n  }\r\n\r\n\r\n  async saveSession(input: Partial<Session> & { name: string; projectRoot: string; notes?: string; tags?: string[] }): Promise<Result<Session>> {\r\n    // Generate session object (id, timestamps, etc. should be handled by caller for now)\r\n    const session: Session = {\r\n      id: input.id || `session-${Date.now()}`,\r\n      name: input.name,\r\n      projectRoot: input.projectRoot,\r\n      createdAt: input.createdAt || new Date(),\r\n      updatedAt: new Date(),\r\n      tags: input.tags || [],\r\n      notes: input.notes,\r\n      files: input.files || [],\r\n      git: input.git!,\r\n      extensions: input.extensions,\r\n    };\r\n    const result = await this.repository.save(session);\r\n    if (isFailure(result)) return { ok: false, error: result.error };\r\n    return { ok: true, value: session };\r\n  }\r\n\r\n  async updateSession(idOrName: string, input: Partial<Session> & { notes?: string; tags?: string[] }): Promise<Result<Session>> {\r\n    const loadResult = await this.repository.load(idOrName);\r\n    if (isFailure(loadResult)) return { ok: false, error: loadResult.error };\r\n    const oldSession = loadResult.value;\r\n    const updated: Session = {\r\n      ...oldSession,\r\n      updatedAt: new Date(),\r\n      notes: input.notes ?? oldSession.notes,\r\n      tags: input.tags ?? oldSession.tags,\r\n      files: input.files ?? oldSession.files,\r\n      git: input.git ?? oldSession.git,\r\n      extensions: input.extensions ?? oldSession.extensions,\r\n    };\r\n    const result = await this.repository.save(updated);\r\n    if (isFailure(result)) return { ok: false, error: result.error };\r\n    return { ok: true, value: updated };\r\n  }\r\n\r\n  async resumeSession(idOrName: string): Promise<Result<Session>> {\r\n    return this.repository.load(idOrName);\r\n  }\r\n\r\n  async listSessions(filter?: { tags?: string[]; search?: string }): Promise<Result<Session[]>> {\r\n    const result = await this.repository.list();\r\n    if (isFailure(result)) return { ok: false, error: result.error };\r\n    let sessions = result.value;\r\n    if (filter?.tags) {\r\n      sessions = sessions.filter(s => filter.tags!.every(tag => s.tags.includes(tag)));\r\n    }\r\n    if (filter?.search) {\r\n      const term = filter.search.toLowerCase();\r\n      sessions = sessions.filter(s => s.name.toLowerCase().includes(term) || (s.notes?.toLowerCase().includes(term)));\r\n    }\r\n    // Optionally, load full session objects if needed (for now, just return index entries)\r\n    // If full objects needed, map: await Promise.all(sessions.map(s => this.repository.load(s.id)))\r\n    return { ok: true, value: sessions as unknown as Session[] };\r\n  }\r\n\r\n  async deleteSession(idOrName: string): Promise<Result<void>> {\r\n    return this.repository.delete(idOrName);\r\n  }\r\n\r\n  exportSession(idOrName: string, outputPath: string): Promise<Result<string>> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  importSession(filePath: string): Promise<Result<Session>> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}", "import { Session } from '@codestate/core/domain/models/Session';\r\nimport { validateSession, validateSessionIndex, SessionIndex, SessionIndexEntry } from '@codestate/core/domain/schemas/SchemaRegistry';\r\nimport { Result, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { ConfigurableLogger } from '@codestate/infrastructure/services/ConfigurableLogger/ConfigurableLogger';\r\nimport { FileStorage } from '@codestate/infrastructure/services/FileStorage';\r\nimport { StorageError } from '@codestate/core/domain/types/ErrorTypes';\r\nimport { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\n\r\nconst SESSION_INDEX_PATH = 'sessions/index.json';\r\nconst SESSION_FILE_PREFIX = 'sessions/session-';\r\nconst SESSION_FILE_SUFFIX = '.json';\r\nconst SESSION_INDEX_VERSION = '1.0.0';\r\n\r\nexport class SessionRepository {\r\n  private logger: ILoggerService;\r\n  private storage: FileStorage;\r\n\r\n  constructor(logger: ILoggerService, storage: FileStorage) {\r\n    this.logger = logger;\r\n    this.storage = storage;\r\n  }\r\n\r\n  private getSessionFileName(id: string) {\r\n    return `${SESSION_FILE_PREFIX}${id}${SESSION_FILE_SUFFIX}`;\r\n  }\r\n\r\n  async load(idOrName: string): Promise<Result<Session, StorageError>> {\r\n    this.logger.debug(`Loading session: ${idOrName}`);\r\n    const indexResult = await this.getIndex();\r\n    if (isFailure(indexResult)) return indexResult;\r\n    const entry = indexResult.value.sessions.find(s => s.id === idOrName || s.name === idOrName);\r\n    if (!entry) {\r\n      return { ok: false, error: new StorageError('Session not found', undefined, { idOrName }) };\r\n    }\r\n    const fileResult = await this.storage.read(entry.referenceFile);\r\n    if (isFailure(fileResult)) return fileResult;\r\n    try {\r\n      const validatedSession = validateSession(JSON.parse(fileResult.value));\r\n      // Ensure createdAt and updatedAt are Date objects and required\r\n      const session: Session = {\r\n        ...validatedSession,\r\n        createdAt: validatedSession.createdAt || new Date(),\r\n        updatedAt: validatedSession.updatedAt || new Date(),\r\n      };\r\n      return { ok: true, value: session };\r\n    } catch (error) {\r\n      this.logger.error('Session validation failed', { error });\r\n      return { ok: false, error: new StorageError('Session validation failed', undefined, { error }) };\r\n    }\r\n  }\r\n\r\n  async save(session: Session): Promise<Result<void, StorageError>> {\r\n    this.logger.debug(`Saving session: ${session.id}`);\r\n    try {\r\n      validateSession(session);\r\n    } catch (error) {\r\n      this.logger.error('Session validation failed', { error });\r\n      return { ok: false, error: new StorageError('Session validation failed', undefined, { error }) };\r\n    }\r\n    // Write session file\r\n    const fileName = this.getSessionFileName(session.id);\r\n    const writeResult = await this.storage.write(fileName, JSON.stringify(session));\r\n    if (isFailure(writeResult)) return writeResult;\r\n    // Update index\r\n    const indexResult = await this.getIndex();\r\n    let index: SessionIndex;\r\n    if (isFailure(indexResult)) {\r\n      // If index doesn't exist, create new\r\n      index = { version: SESSION_INDEX_VERSION, sessions: [] };\r\n    } else {\r\n      index = indexResult.value;\r\n    }\r\n    // Remove any existing entry for this id\r\n    index.sessions = index.sessions.filter(s => s.id !== session.id);\r\n    // Add new entry\r\n    const entry: SessionIndexEntry = {\r\n      id: session.id,\r\n      name: session.name,\r\n      projectRoot: session.projectRoot,\r\n      createdAt: session.createdAt,\r\n      updatedAt: session.updatedAt,\r\n      tags: session.tags,\r\n      notes: session.notes,\r\n      referenceFile: fileName,\r\n    };\r\n    index.sessions.push(entry);\r\n    // Write index\r\n    const indexWrite = await this.storage.write(SESSION_INDEX_PATH, JSON.stringify(index));\r\n    if (isFailure(indexWrite)) return indexWrite;\r\n    return { ok: true, value: undefined };\r\n  }\r\n\r\n  async delete(idOrName: string): Promise<Result<void, StorageError>> {\r\n    this.logger.debug(`Deleting session: ${idOrName}`);\r\n    const indexResult = await this.getIndex();\r\n    if (isFailure(indexResult)) return indexResult;\r\n    const index = indexResult.value;\r\n    const entry = index.sessions.find(s => s.id === idOrName || s.name === idOrName);\r\n    if (!entry) {\r\n      return { ok: false, error: new StorageError('Session not found', undefined, { idOrName }) };\r\n    }\r\n    // Delete session file\r\n    const delResult = await this.storage.delete(entry.referenceFile);\r\n    if (isFailure(delResult)) return delResult;\r\n    // Remove from index\r\n    index.sessions = index.sessions.filter(s => s.id !== entry.id);\r\n    const indexWrite = await this.storage.write(SESSION_INDEX_PATH, JSON.stringify(index));\r\n    if (isFailure(indexWrite)) return indexWrite;\r\n    return { ok: true, value: undefined };\r\n  }\r\n\r\n  async list(): Promise<Result<SessionIndexEntry[], StorageError>> {\r\n    this.logger.debug('Listing all sessions');\r\n    const indexResult = await this.getIndex();\r\n    if (isFailure(indexResult)) return indexResult;\r\n    return { ok: true, value: indexResult.value.sessions };\r\n  }\r\n\r\n  private async getIndex(): Promise<Result<SessionIndex, StorageError>> {\r\n    const readResult = await this.storage.read(SESSION_INDEX_PATH);\r\n    if (isFailure(readResult)) {\r\n      // If file not found, create a new empty index\r\n      if (readResult.error.code === 'STORAGE_READ_FAILED') {\r\n        const emptyIndex: SessionIndex = { version: SESSION_INDEX_VERSION, sessions: [] };\r\n        return { ok: true, value: emptyIndex };\r\n      }\r\n      return { ok: false, error: readResult.error };\r\n    }\r\n    try {\r\n      const index = validateSessionIndex(JSON.parse(readResult.value));\r\n      return { ok: true, value: index };\r\n    } catch (error) {\r\n      this.logger.error('Session index validation failed', { error });\r\n      return { ok: false, error: new StorageError('Session index validation failed', undefined, { error }) };\r\n    }\r\n  }\r\n}", "import { IStorageService } from '../../core/domain/ports/IStorageService';\r\nimport { ILoggerService } from '../../core/domain/ports/ILoggerService';\r\nimport { IEncryptionService } from '../../core/domain/ports/IEncryptionService';\r\nimport { StorageError, ErrorCode } from '../../core/domain/types/ErrorTypes';\r\nimport { Result, isFailure } from '../../core/domain/models/Result';\r\nimport { promises as fs, constants as fsConstants } from 'fs';\r\nimport * as path from 'path';\r\nimport { validateFileStorageConfig } from '../../core/domain/schemas/SchemaRegistry';\r\n\r\ninterface FileStorageConfig {\r\n  encryptionEnabled: boolean;\r\n  encryptionKey?: string;\r\n  dataDir: string;\r\n}\r\n\r\nexport class FileStorage implements IStorageService {\r\n  private config: FileStorageConfig;\r\n\r\n  constructor(\r\n    private logger: ILoggerService,\r\n    private encryption: IEncryptionService,\r\n    config: unknown\r\n  ) {\r\n    this.config = validateFileStorageConfig(config);\r\n  }\r\n\r\n  private resolvePath(relPath: string): string {\r\n    // Prevent path traversal\r\n    const fullPath = path.resolve(this.config.dataDir, relPath);\r\n    if (!fullPath.startsWith(path.resolve(this.config.dataDir))) {\r\n      throw new StorageError('Invalid file path', ErrorCode.STORAGE_INVALID_PATH, { relPath });\r\n    }\r\n    return fullPath;\r\n  }\r\n\r\n  async read(relPath: string): Promise<Result<string, StorageError>> {\r\n    const filePath = this.resolvePath(relPath);\r\n    try {\r\n      const data = await fs.readFile(filePath, 'utf8');\r\n      this.logger.debug('File read', { filePath });\r\n      if (this.config.encryptionEnabled && this.config.encryptionKey) {\r\n        const decrypted = await this.encryption.decrypt(data, this.config.encryptionKey);\r\n        if (isFailure(decrypted)) {\r\n          this.logger.error('Decryption failed during read', { filePath });\r\n          return { ok: false, error: new StorageError('Decryption failed', ErrorCode.STORAGE_DECRYPTION_FAILED, { filePath }) };\r\n        }\r\n        return { ok: true, value: decrypted.value };\r\n      }\r\n      return { ok: true, value: data };\r\n    } catch (err) {\r\n      this.logger.error('File read failed', { filePath, error: err instanceof Error ? err.message : err });\r\n      return { ok: false, error: new StorageError('File read failed', ErrorCode.STORAGE_READ_FAILED, { filePath, originalError: err instanceof Error ? err.message : err }) };\r\n    }\r\n  }\r\n\r\n  async write(relPath: string, data: string): Promise<Result<void, StorageError>> {\r\n    const filePath = this.resolvePath(relPath);\r\n    const dir = path.dirname(filePath);\r\n    try {\r\n      await fs.mkdir(dir, { recursive: true, mode: 0o700 });\r\n      let toWrite = data;\r\n      if (this.config.encryptionEnabled && this.config.encryptionKey) {\r\n        const encrypted = await this.encryption.encrypt(data, this.config.encryptionKey);\r\n        if (isFailure(encrypted)) {\r\n          this.logger.error('Encryption failed during write', { filePath });\r\n          return { ok: false, error: new StorageError('Encryption failed', ErrorCode.STORAGE_WRITE_FAILED, { filePath }) };\r\n        }\r\n        toWrite = encrypted.value;\r\n      }\r\n      const tmpPath = filePath + '.tmp';\r\n      await fs.writeFile(tmpPath, toWrite, { mode: 0o600 });\r\n      const handle = await fs.open(tmpPath, 'r+');\r\n      await handle.sync();\r\n      await handle.close();\r\n      // Backup old file if exists\r\n      try {\r\n        await fs.access(filePath, fsConstants.F_OK);\r\n        await fs.copyFile(filePath, filePath + '.bak');\r\n      } catch {}\r\n      await fs.rename(tmpPath, filePath);\r\n      this.logger.debug('File written atomically', { filePath });\r\n      return { ok: true, value: undefined };\r\n    } catch (err) {\r\n      this.logger.error('File write failed', { filePath, error: err instanceof Error ? err.message : err });\r\n      return { ok: false, error: new StorageError('File write failed', ErrorCode.STORAGE_WRITE_FAILED, { filePath, originalError: err instanceof Error ? err.message : err }) };\r\n    }\r\n  }\r\n\r\n  async exists(relPath: string): Promise<Result<boolean, StorageError>> {\r\n    const filePath = this.resolvePath(relPath);\r\n    try {\r\n      await fs.access(filePath, fsConstants.F_OK);\r\n      this.logger.debug('File exists', { filePath });\r\n      return { ok: true, value: true };\r\n    } catch {\r\n      return { ok: true, value: false };\r\n    }\r\n  }\r\n\r\n  async delete(relPath: string): Promise<Result<void, StorageError>> {\r\n    const filePath = this.resolvePath(relPath);\r\n    try {\r\n      // Backup before delete\r\n      try {\r\n        await fs.copyFile(filePath, filePath + '.bak');\r\n      } catch {}\r\n      await fs.unlink(filePath);\r\n      this.logger.debug('File deleted', { filePath });\r\n      return { ok: true, value: undefined };\r\n    } catch (err) {\r\n      this.logger.error('File delete failed', { filePath, error: err instanceof Error ? err.message : err });\r\n      return { ok: false, error: new StorageError('File delete failed', ErrorCode.STORAGE_DELETE_FAILED, { filePath, originalError: err instanceof Error ? err.message : err }) };\r\n    }\r\n  }\r\n} ", "// Main entry point for CLI/IDE to interact with sessions (no DI required)\r\nimport { SessionService } from '@codestate/core/services/session/SessionService';\r\nimport { SessionRepository } from '@codestate/infrastructure/repositories/SessionRepository';\r\nimport { FileLogger } from '@codestate/infrastructure/services/FileLogger';\r\nimport { BasicEncryption } from '@codestate/infrastructure/services/BasicEncryption';\r\nimport { FileStorage } from '@codestate/infrastructure/services/FileStorage';\r\nimport { ISessionService } from '@codestate/core/domain/ports/ISessionService';\r\nimport { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\nimport { IEncryptionService } from '@codestate/core/domain/ports/IEncryptionService';\r\nimport { Session } from '@codestate/core/domain/models/Session';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport * as path from 'path';\r\n\r\nexport class SessionFacade implements ISessionService {\r\n  private service: SessionService;\r\n\r\n  constructor(\r\n    sessionsDir?: string,\r\n    logger?: ILoggerService,\r\n    encryption?: IEncryptionService\r\n  ) {\r\n    const _logger = logger || new FileLogger({ \r\n      level: 'LOG', \r\n      sinks: ['file'],\r\n      filePath: path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate', 'logs', 'session.log')\r\n    });\r\n    const _encryption = encryption || new BasicEncryption(_logger);\r\n    const fileStorageConfig = {\r\n      encryptionEnabled: false,\r\n      dataDir: sessionsDir || path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate'),\r\n    };\r\n    const storage = new FileStorage(_logger, _encryption, fileStorageConfig);\r\n    const repository = new SessionRepository(_logger, storage);\r\n    this.service = new SessionService(repository);\r\n  }\r\n\r\n  async saveSession(...args: Parameters<ISessionService['saveSession']>) {\r\n    return this.service.saveSession(...args);\r\n  }\r\n\r\n  async updateSession(...args: Parameters<ISessionService['updateSession']>) {\r\n    return this.service.updateSession(...args);\r\n  }\r\n\r\n  async resumeSession(...args: Parameters<ISessionService['resumeSession']>) {\r\n    return this.service.resumeSession(...args);\r\n  }\r\n\r\n  async listSessions(...args: Parameters<ISessionService['listSessions']>) {\r\n    return this.service.listSessions(...args);\r\n  }\r\n\r\n  async deleteSession(...args: Parameters<ISessionService['deleteSession']>) {\r\n    return this.service.deleteSession(...args);\r\n  }\r\n\r\n  async exportSession(...args: Parameters<ISessionService['exportSession']>) {\r\n    return this.service.exportSession(...args);\r\n  }\r\n\r\n  async importSession(...args: Parameters<ISessionService['importSession']>) {\r\n    return this.service.importSession(...args);\r\n  }\r\n}\r\n\r\nexport default SessionFacade;", "import { ISessionService } from '@codestate/core/domain/ports/ISessionService';\r\nimport { Session } from '@codestate/core/domain/models/Session';\r\nimport { Result, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { SessionFacade } from '@codestate/core/services/session/SessionFacade';\r\n\r\nexport class SaveSession {\r\n  private sessionService: ISessionService;\r\n  \r\n  constructor(sessionService?: ISessionService) {\r\n    this.sessionService = sessionService || new SessionFacade();\r\n  }\r\n  \r\n  async execute(input: {\r\n    name: string;\r\n    projectRoot: string;\r\n    notes?: string;\r\n    tags?: string[];\r\n    files?: Session['files'];\r\n    git: Session['git'];\r\n    extensions?: Session['extensions'];\r\n  }): Promise<Result<Session>> {\r\n    const sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    const now = new Date();\r\n    \r\n    return this.sessionService.saveSession({\r\n      id: sessionId,\r\n      name: input.name,\r\n      projectRoot: input.projectRoot,\r\n      createdAt: now,\r\n      updatedAt: now,\r\n      notes: input.notes,\r\n      tags: input.tags || [],\r\n      files: input.files || [],\r\n      git: input.git,\r\n      extensions: input.extensions,\r\n    });\r\n  }\r\n} ", "import { ISessionService } from '@codestate/core/domain/ports/ISessionService';\r\nimport { Session } from '@codestate/core/domain/models/Session';\r\nimport { Result, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { SessionFacade } from '@codestate/core/services/session/SessionFacade';\r\n\r\nexport class UpdateSession {\r\n  private sessionService: ISessionService;\r\n  \r\n  constructor(sessionService?: ISessionService) {\r\n    this.sessionService = sessionService || new SessionFacade();\r\n  }\r\n  \r\n  async execute(idOrName: string, input: {\r\n    notes?: string;\r\n    tags?: string[];\r\n    files?: Session['files'];\r\n    git?: Session['git'];\r\n    extensions?: Session['extensions'];\r\n  }): Promise<Result<Session>> {\r\n    return this.sessionService.updateSession(idOrName, input);\r\n  }\r\n} ", "import { ISessionService } from '@codestate/core/domain/ports/ISessionService';\r\nimport { Session } from '@codestate/core/domain/models/Session';\r\nimport { Result, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { SessionFacade } from '@codestate/core/services/session/SessionFacade';\r\n\r\nexport class ResumeSession {\r\n  private sessionService: ISessionService;\r\n  \r\n  constructor(sessionService?: ISessionService) {\r\n    this.sessionService = sessionService || new SessionFacade();\r\n  }\r\n  \r\n  async execute(idOrName: string): Promise<Result<Session>> {\r\n    return this.sessionService.resumeSession(idOrName);\r\n  }\r\n} ", "import { ISessionService } from '@codestate/core/domain/ports/ISessionService';\r\nimport { Session } from '@codestate/core/domain/models/Session';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { SessionFacade } from '@codestate/core/services/session/SessionFacade';\r\n\r\nexport class ListSessions {\r\n  private sessionService: ISessionService;\r\n  \r\n  constructor(sessionService?: ISessionService) {\r\n    this.sessionService = sessionService || new SessionFacade();\r\n  }\r\n  \r\n  async execute(filter?: { tags?: string[]; search?: string }): Promise<Result<Session[]>> {\r\n    return this.sessionService.listSessions(filter);\r\n  }\r\n} ", "import { ISessionService } from '@codestate/core/domain/ports/ISessionService';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { SessionFacade } from '@codestate/core/services/session/SessionFacade';\r\n\r\nexport class DeleteSession {\r\n  private sessionService: ISessionService;\r\n  \r\n  constructor(sessionService?: ISessionService) {\r\n    this.sessionService = sessionService || new SessionFacade();\r\n  }\r\n  \r\n  async execute(idOrName: string): Promise<Result<void>> {\r\n    return this.sessionService.deleteSession(idOrName);\r\n  }\r\n} ", "import { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { GitStatus, GitFile, GitFileStatus, GitStash, GitStashResult, GitStashApplyResult } from '@codestate/core/domain/models/Git';\r\nimport { Result, isSuccess, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\nimport { ITerminalService } from '@codestate/core/domain/ports/ITerminalService';\r\nimport { GitError, ErrorCode } from '@codestate/core/domain/types/ErrorTypes';\r\nimport { validateGitStatus } from '@codestate/core/domain/schemas/SchemaRegistry';\r\nimport { platform } from 'os';\r\n\r\nexport class GitService implements IGitService {\r\n  constructor(\r\n    private terminalService: ITerminalService,\r\n    private logger: ILoggerService,\r\n    private repositoryPath?: string\r\n  ) {}\r\n\r\n  async getIsDirty(): Promise<Result<boolean>> {\r\n    this.logger.debug('GitService.getIsDirty called');\r\n    try {\r\n      const statusResult = await this.getStatus();\r\n      if (isFailure(statusResult)) {\r\n        return statusResult;\r\n      }\r\n      return { ok: true, value: statusResult.value.isDirty };\r\n    } catch (error) {\r\n      this.logger.error('Failed to check if repository is dirty', { error });\r\n      return { ok: false, error: new GitError('Failed to check repository status', ErrorCode.GIT_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  async getDirtyData(): Promise<Result<GitStatus>> {\r\n    this.logger.debug('GitService.getDirtyData called');\r\n    return this.getStatus();\r\n  }\r\n\r\n  async getStatus(): Promise<Result<GitStatus>> {\r\n    this.logger.debug('GitService.getStatus called');\r\n    try {\r\n      // Check if we're in a git repository\r\n      const isRepoResult = await this.isGitRepository();\r\n      if (isFailure(isRepoResult) || !isRepoResult.value) {\r\n        return { ok: false, error: new GitError('Not a git repository', ErrorCode.GIT_NOT_REPOSITORY) };\r\n      }\r\n\r\n      // Get git status\r\n      const statusResult = await this.terminalService.execute('git status --porcelain', {\r\n        cwd: this.repositoryPath,\r\n        timeout: 30000\r\n      });\r\n\r\n      if (isFailure(statusResult)) {\r\n        this.logger.error('Failed to get git status', { error: statusResult.error });\r\n        return { ok: false, error: new GitError('Failed to get git status', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      const files = this.parseGitStatus(statusResult.value.stdout);\r\n      const isDirty = files.some(file => \r\n        file.status !== GitFileStatus.UNTRACKED || \r\n        file.staged\r\n      );\r\n\r\n      const gitStatus: GitStatus = {\r\n        isDirty,\r\n        dirtyFiles: files.filter(file => file.staged),\r\n        newFiles: files.filter(file => file.status === GitFileStatus.ADDED),\r\n        modifiedFiles: files.filter(file => file.status === GitFileStatus.MODIFIED),\r\n        deletedFiles: files.filter(file => file.status === GitFileStatus.DELETED),\r\n        untrackedFiles: files.filter(file => file.status === GitFileStatus.UNTRACKED)\r\n      };\r\n\r\n      this.logger.log('Git status retrieved', { isDirty, fileCount: files.length });\r\n      return { ok: true, value: gitStatus };\r\n    } catch (error) {\r\n      this.logger.error('Failed to get git status', { error });\r\n      return { ok: false, error: new GitError('Failed to get git status', ErrorCode.GIT_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  async createStash(message?: string): Promise<Result<GitStashResult>> {\r\n    this.logger.debug('GitService.createStash called', { message });\r\n    try {\r\n      const timestamp = Date.now();\r\n      const stashName = `codestate-stash-${timestamp}`;\r\n      const stashMessage = message || `CodeState stash created at ${new Date(timestamp).toISOString()}`;\r\n\r\n      const stashResult = await this.terminalService.execute(`git stash push -m \"${stashMessage}\"`, {\r\n        cwd: this.repositoryPath,\r\n        timeout: 30000\r\n      });\r\n\r\n      if (isFailure(stashResult)) {\r\n        this.logger.error('Failed to create stash', { error: stashResult.error });\r\n        return { \r\n          ok: true, \r\n          value: { \r\n            success: false, \r\n            error: 'Failed to create stash' \r\n          } \r\n        };\r\n      }\r\n\r\n      // Get the stash list to find our newly created stash\r\n      const listResult = await this.listStashes();\r\n      if (isFailure(listResult)) {\r\n        return { \r\n          ok: true, \r\n          value: { \r\n            success: false, \r\n            error: 'Failed to list stashes after creation' \r\n          } \r\n        };\r\n      }\r\n\r\n      const newStash = listResult.value.find(stash => \r\n        stash.name.includes(`codestate-stash-${timestamp}`) || \r\n        stash.message === stashMessage\r\n      );\r\n\r\n      if (!newStash) {\r\n        return { \r\n          ok: true, \r\n          value: { \r\n            success: false, \r\n            error: 'Stash created but could not be found in list' \r\n          } \r\n        };\r\n      }\r\n\r\n      this.logger.log('Stash created successfully', { stashId: newStash.id, stashName: newStash.name });\r\n      return { \r\n        ok: true, \r\n        value: { \r\n          success: true, \r\n          stashId: newStash.id \r\n        } \r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Failed to create stash', { error });\r\n      return { \r\n        ok: true, \r\n        value: { \r\n          success: false, \r\n          error: error instanceof Error ? error.message : 'Failed to create stash' \r\n        } \r\n      };\r\n    }\r\n  }\r\n\r\n  async applyStash(stashName: string): Promise<Result<GitStashApplyResult>> {\r\n    this.logger.debug('GitService.applyStash called', { stashName });\r\n    try {\r\n      const applyResult = await this.terminalService.execute(`git stash apply \"${stashName}\"`, {\r\n        cwd: this.repositoryPath,\r\n        timeout: 30000\r\n      });\r\n\r\n      if (isFailure(applyResult)) {\r\n        this.logger.error('Failed to apply stash', { error: applyResult.error, stashName });\r\n        return { \r\n          ok: true, \r\n          value: { \r\n            success: false, \r\n            error: 'Failed to apply stash' \r\n          } \r\n        };\r\n      }\r\n\r\n      // Check for conflicts\r\n      const statusResult = await this.getStatus();\r\n      const conflicts: string[] = [];\r\n      \r\n      if (isSuccess(statusResult)) {\r\n        const status = statusResult.value;\r\n        conflicts.push(...status.modifiedFiles\r\n          .filter(file => file.path.includes('<<<<<<<') || file.path.includes('=======') || file.path.includes('>>>>>>>'))\r\n          .map(file => file.path)\r\n        );\r\n      }\r\n\r\n      this.logger.log('Stash applied successfully', { stashName, conflicts: conflicts.length });\r\n      return { \r\n        ok: true, \r\n        value: { \r\n          success: true, \r\n          conflicts: conflicts.length > 0 ? conflicts : undefined \r\n        } \r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Failed to apply stash', { error, stashName });\r\n      return { \r\n        ok: true, \r\n        value: { \r\n          success: false, \r\n          error: error instanceof Error ? error.message : 'Failed to apply stash' \r\n        } \r\n      };\r\n    }\r\n  }\r\n\r\n  async listStashes(): Promise<Result<GitStash[]>> {\r\n    this.logger.debug('GitService.listStashes called');\r\n    try {\r\n      const listResult = await this.terminalService.execute('git stash list --format=\"%H|%gd|%s|%ct\"', {\r\n        cwd: this.repositoryPath,\r\n        timeout: 30000\r\n      });\r\n\r\n      if (isFailure(listResult)) {\r\n        this.logger.error('Failed to list stashes', { error: listResult.error });\r\n        return { ok: false, error: new GitError('Failed to list stashes', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      const stashes: GitStash[] = [];\r\n      const lines = listResult.value.stdout.trim().split('\\n').filter(line => line.length > 0);\r\n\r\n      for (const line of lines) {\r\n        const [hash, ref, message, timestamp] = line.split('|');\r\n        if (hash && ref && message && timestamp) {\r\n          stashes.push({\r\n            id: hash,\r\n            name: ref,\r\n            message: message.trim(),\r\n            timestamp: parseInt(timestamp, 10) * 1000, // Convert to milliseconds\r\n            branch: 'unknown' // Git doesn't provide branch info in stash list\r\n          });\r\n        }\r\n      }\r\n\r\n      this.logger.log('Stashes listed successfully', { count: stashes.length });\r\n      return { ok: true, value: stashes };\r\n    } catch (error) {\r\n      this.logger.error('Failed to list stashes', { error });\r\n      return { ok: false, error: new GitError('Failed to list stashes', ErrorCode.GIT_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  async deleteStash(stashName: string): Promise<Result<boolean>> {\r\n    this.logger.debug('GitService.deleteStash called', { stashName });\r\n    try {\r\n      const deleteResult = await this.terminalService.execute(`git stash drop \"${stashName}\"`, {\r\n        cwd: this.repositoryPath,\r\n        timeout: 30000\r\n      });\r\n\r\n      if (isFailure(deleteResult)) {\r\n        this.logger.error('Failed to delete stash', { error: deleteResult.error, stashName });\r\n        return { ok: false, error: new GitError('Failed to delete stash', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      this.logger.log('Stash deleted successfully', { stashName });\r\n      return { ok: true, value: true };\r\n    } catch (error) {\r\n      this.logger.error('Failed to delete stash', { error, stashName });\r\n      return { ok: false, error: new GitError('Failed to delete stash', ErrorCode.GIT_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  async isGitRepository(): Promise<Result<boolean>> {\r\n    this.logger.debug('GitService.isGitRepository called');\r\n    try {\r\n      const result = await this.terminalService.execute('git rev-parse --git-dir', {\r\n        cwd: this.repositoryPath,\r\n        timeout: 10000\r\n      });\r\n\r\n      return { ok: true, value: isSuccess(result) && result.value.exitCode === 0 };\r\n    } catch (error) {\r\n      this.logger.error('Failed to check if directory is git repository', { error });\r\n      return { ok: false, error: new GitError('Failed to check git repository', ErrorCode.GIT_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  async getCurrentBranch(): Promise<Result<string>> {\r\n    this.logger.debug('GitService.getCurrentBranch called');\r\n    try {\r\n      const result = await this.terminalService.execute('git branch --show-current', {\r\n        cwd: this.repositoryPath,\r\n        timeout: 10000\r\n      });\r\n\r\n      if (isFailure(result)) {\r\n        this.logger.error('Failed to get current branch', { error: result.error });\r\n        return { ok: false, error: new GitError('Failed to get current branch', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n      \r\n      if (isFailure(result) || result.value.exitCode !== 0) {\r\n        this.logger.error('Failed to get current branch', { exitCode: result.value.exitCode, stderr: result.value.stderr });\r\n        return { ok: false, error: new GitError('Failed to get current branch', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      const branch = result.value.stdout.trim();\r\n      this.logger.log('Current branch retrieved', { branch });\r\n      return { ok: true, value: branch };\r\n    } catch (error) {\r\n      this.logger.error('Failed to get current branch', { error });\r\n      return { ok: false, error: new GitError('Failed to get current branch', ErrorCode.GIT_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  async getCurrentCommit(): Promise<Result<string>> {\r\n    this.logger.debug('GitService.getCurrentCommit called');\r\n    try {\r\n      const result = await this.terminalService.execute('git rev-parse HEAD', {\r\n        cwd: this.repositoryPath,\r\n        timeout: 10000\r\n      });\r\n\r\n      if (isFailure(result)) {\r\n        this.logger.error('Failed to get current commit', { error: result.error });\r\n        return { ok: false, error: new GitError('Failed to get current commit', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n      \r\n      if (isFailure(result) || result.value.exitCode !== 0) {\r\n        this.logger.error('Failed to get current commit', { exitCode: result.value.exitCode, stderr: result.value.stderr });\r\n        return { ok: false, error: new GitError('Failed to get current commit', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      const commit = result.value.stdout.trim();\r\n      this.logger.log('Current commit retrieved', { commit });\r\n      return { ok: true, value: commit };\r\n    } catch (error) {\r\n      this.logger.error('Failed to get current commit', { error });\r\n      return { ok: false, error: new GitError('Failed to get current commit', ErrorCode.GIT_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  async commitChanges(message: string): Promise<Result<boolean>> {\r\n    this.logger.debug('GitService.commitChanges called', { message });\r\n    let tempFile: string | undefined;\r\n    try {\r\n      // First, check if Git is properly configured\r\n      const configResult = await this.isGitConfigured();\r\n      if (isFailure(configResult)) {\r\n        this.logger.error('Failed to check git configuration', { error: configResult.error });\r\n        return { ok: false, error: new GitError('Failed to check git configuration', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      if (!configResult.value) {\r\n        this.logger.error('Git is not properly configured. Please set user.name and user.email');\r\n        return { ok: false, error: new GitError('Git is not properly configured. Please set user.name and user.email', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      // Check if there are any changes to commit\r\n      const statusResult = await this.getStatus();\r\n      if (isFailure(statusResult)) {\r\n        this.logger.error('Failed to get git status before commit', { error: statusResult.error });\r\n        return { ok: false, error: new GitError('Failed to get git status before commit', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      const status = statusResult.value;\r\n      if (!status.isDirty) {\r\n        this.logger.warn('No changes to commit');\r\n        return { ok: true, value: true }; // Return success since there's nothing to commit\r\n      }\r\n\r\n      // Add all changes\r\n      const addResult = await this.terminalService.execute('git add .', {\r\n        cwd: this.repositoryPath,\r\n        timeout: 30000\r\n      });\r\n\r\n      if (isFailure(addResult)) {\r\n        this.logger.error('Failed to add changes', { error: addResult.error });\r\n        return { ok: false, error: new GitError('Failed to add changes', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      if (isFailure(addResult) || addResult.value.exitCode !== 0) {\r\n        this.logger.error('Failed to add changes', { exitCode: addResult.value.exitCode, stderr: addResult.value.stderr });\r\n        return { ok: false, error: new GitError('Failed to add changes', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      // Check if there are staged changes to commit\r\n      const stagedStatusResult = await this.terminalService.execute('git diff --cached --name-only', {\r\n        cwd: this.repositoryPath,\r\n        timeout: 10000\r\n      });\r\n\r\n      if (isFailure(stagedStatusResult)) {\r\n        this.logger.error('Failed to check staged changes', { error: stagedStatusResult.error });\r\n        return { ok: false, error: new GitError('Failed to check staged changes', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      const stagedFiles = stagedStatusResult.value.stdout.trim().split('\\n').filter(line => line.length > 0);\r\n      if (stagedFiles.length === 0) {\r\n        this.logger.warn('No changes staged for commit');\r\n        return { ok: true, value: true }; // Return success since there's nothing to commit\r\n      }\r\n\r\n      // Then commit with the provided message using a temporary file to avoid shell parsing issues\r\n      tempFile = `temp_commit_msg_${Date.now()}.txt`;\r\n      \r\n      this.logger.debug('Writing commit message to temp file', { tempFile, message });\r\n      \r\n      // Write commit message to temp file\r\n      const writeMsgResult = await this.terminalService.execute(`echo \"${message.replace(/\"/g, '\\\\\"')}\" > ${tempFile}`, {\r\n        cwd: this.repositoryPath,\r\n        timeout: 10000\r\n      });\r\n\r\n      if (isFailure(writeMsgResult) || writeMsgResult.value.exitCode !== 0) {\r\n        this.logger.error('Failed to write commit message to temp file', { \r\n          error: isSuccess(writeMsgResult) ? undefined : writeMsgResult.error,\r\n          exitCode: isSuccess(writeMsgResult) ? writeMsgResult.value.exitCode : undefined,\r\n          stderr: isSuccess(writeMsgResult) ? writeMsgResult.value.stderr : undefined\r\n        });\r\n        // Clean up temp file even on write failure\r\n        await this.cleanupTempFile(tempFile);\r\n        return { ok: false, error: new GitError('Failed to write commit message', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      this.logger.debug('Commit message written to temp file', { tempFile });\r\n\r\n      // Commit using the temp file\r\n      const commitResult = await this.terminalService.execute(`git commit -F ${tempFile}`, {\r\n        cwd: this.repositoryPath,\r\n        timeout: 30000\r\n      });\r\n\r\n      this.logger.debug('Git commit command executed', { \r\n        exitCode: isSuccess(commitResult) ? commitResult.value.exitCode : undefined,\r\n        stdout: isSuccess(commitResult) ? commitResult.value.stdout : undefined,\r\n        stderr: isSuccess(commitResult) ? commitResult.value.stderr : undefined\r\n      });\r\n\r\n      // Always clean up temp file regardless of commit result\r\n      await this.cleanupTempFile(tempFile);\r\n\r\n      if (isFailure(commitResult)) {\r\n        this.logger.error('Failed to commit changes', { error: commitResult.error });\r\n        return { ok: false, error: new GitError('Failed to commit changes', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      if (isFailure(commitResult) || commitResult.value.exitCode !== 0) {\r\n        this.logger.error('Failed to commit changes', { \r\n          exitCode: commitResult.value.exitCode, \r\n          stderr: commitResult.value.stderr,\r\n          stdout: commitResult.value.stdout \r\n        });\r\n        return { ok: false, error: new GitError('Failed to commit changes', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      this.logger.log('Changes committed successfully', { message });\r\n      return { ok: true, value: true };\r\n    } catch (error) {\r\n      // Clean up temp file even on unexpected errors\r\n      if (tempFile) {\r\n        await this.cleanupTempFile(tempFile);\r\n      }\r\n      this.logger.error('Failed to commit changes', { error });\r\n      return { ok: false, error: new GitError('Failed to commit changes', ErrorCode.GIT_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  async getRepositoryRoot(): Promise<Result<string>> {\r\n    this.logger.debug('GitService.getRepositoryRoot called');\r\n    try {\r\n      const result = await this.terminalService.execute('git rev-parse --show-toplevel', {\r\n        cwd: this.repositoryPath,\r\n        timeout: 10000\r\n      });\r\n\r\n      if (isFailure(result)) {\r\n        this.logger.error('Failed to get repository root', { error: result.error });\r\n        return { ok: false, error: new GitError('Failed to get repository root', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n      \r\n      if (isFailure(result) || result.value.exitCode !== 0) {\r\n        this.logger.error('Failed to get repository root', { exitCode: result.value.exitCode, stderr: result.value.stderr });\r\n        return { ok: false, error: new GitError('Failed to get repository root', ErrorCode.GIT_COMMAND_FAILED) };\r\n      }\r\n\r\n      const root = result.value.stdout.trim();\r\n      this.logger.log('Repository root retrieved', { root });\r\n      return { ok: true, value: root };\r\n    } catch (error) {\r\n      this.logger.error('Failed to get repository root', { error });\r\n      return { ok: false, error: new GitError('Failed to get repository root', ErrorCode.GIT_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  async isGitConfigured(): Promise<Result<boolean>> {\r\n    this.logger.debug('GitService.isGitConfigured called');\r\n    try {\r\n      // Check if user name is configured\r\n      const nameResult = await this.terminalService.execute('git config user.name', {\r\n        cwd: this.repositoryPath,\r\n        timeout: 5000\r\n      });\r\n\r\n      // Check if user email is configured\r\n      const emailResult = await this.terminalService.execute('git config user.email', {\r\n        cwd: this.repositoryPath,\r\n        timeout: 5000\r\n      });\r\n\r\n      const hasName = isSuccess(nameResult) && nameResult.value.exitCode === 0 && nameResult.value.stdout.trim().length > 0;\r\n      const hasEmail = isSuccess(emailResult) && emailResult.value.exitCode === 0 && emailResult.value.stdout.trim().length > 0;\r\n\r\n      const isConfigured = hasName && hasEmail;\r\n      this.logger.log('Git configuration check', { hasName, hasEmail, isConfigured });\r\n      \r\n      return { ok: true, value: isConfigured };\r\n    } catch (error) {\r\n      this.logger.error('Failed to check git configuration', { error });\r\n      return { ok: false, error: new GitError('Failed to check git configuration', ErrorCode.GIT_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  private parseGitStatus(statusOutput: string): GitFile[] {\r\n    const files: GitFile[] = [];\r\n    const lines = statusOutput.trim().split('\\n').filter(line => line.length > 0);\r\n\r\n    for (const line of lines) {\r\n      if (line.length < 3) continue;\r\n\r\n      const status = line.substring(0, 2);\r\n      const path = line.substring(3);\r\n\r\n      let fileStatus: GitFileStatus;\r\n      let staged = false;\r\n\r\n      // Parse git status codes - check for exact matches first\r\n      switch (status) {\r\n        case 'M ': // Modified, not staged\r\n          fileStatus = GitFileStatus.MODIFIED;\r\n          staged = false;\r\n          break;\r\n        case 'A ': // Added, not staged\r\n          fileStatus = GitFileStatus.ADDED;\r\n          staged = false;\r\n          break;\r\n        case 'D ': // Deleted, not staged\r\n          fileStatus = GitFileStatus.DELETED;\r\n          staged = false;\r\n          break;\r\n        case 'R ': // Renamed, not staged\r\n          fileStatus = GitFileStatus.RENAMED;\r\n          staged = false;\r\n          break;\r\n        case 'C ': // Copied, not staged\r\n          fileStatus = GitFileStatus.COPIED;\r\n          staged = false;\r\n          break;\r\n        case '??': // Untracked\r\n          fileStatus = GitFileStatus.UNTRACKED;\r\n          staged = false;\r\n          break;\r\n        default:\r\n          // Check for single character status (staged files)\r\n          if (status.length === 1) {\r\n            switch (status) {\r\n              case 'M': // Modified, staged\r\n                fileStatus = GitFileStatus.MODIFIED;\r\n                staged = true;\r\n                break;\r\n              case 'A': // Added, staged\r\n                fileStatus = GitFileStatus.ADDED;\r\n                staged = true;\r\n                break;\r\n              case 'D': // Deleted, staged\r\n                fileStatus = GitFileStatus.DELETED;\r\n                staged = true;\r\n                break;\r\n              case 'R': // Renamed, staged\r\n                fileStatus = GitFileStatus.RENAMED;\r\n                staged = true;\r\n                break;\r\n              case 'C': // Copied, staged\r\n                fileStatus = GitFileStatus.COPIED;\r\n                staged = true;\r\n                break;\r\n              default:\r\n                // Handle other status codes as modified\r\n                fileStatus = GitFileStatus.MODIFIED;\r\n                staged = true;\r\n                break;\r\n            }\r\n          } else {\r\n            // Handle other status codes as modified\r\n            fileStatus = GitFileStatus.MODIFIED;\r\n            staged = false;\r\n          }\r\n          break;\r\n      }\r\n\r\n      files.push({\r\n        path,\r\n        status: fileStatus,\r\n        staged\r\n      });\r\n    }\r\n\r\n    return files;\r\n  }\r\n\r\n  private async cleanupTempFile(tempFile: string): Promise<void> {\r\n    try {\r\n      // Use cross-platform file deletion\r\n      const currentPlatform = platform();\r\n      let deleteCommand: string;\r\n      \r\n      if (currentPlatform === 'win32') {\r\n        // Windows - use del command\r\n        deleteCommand = `del /f /q \"${tempFile}\"`;\r\n      } else {\r\n        // Unix-like systems - use rm command\r\n        deleteCommand = `rm -f \"${tempFile}\"`;\r\n      }\r\n      \r\n      this.logger.debug('Attempting to clean up temp file', { tempFile, deleteCommand, platform: currentPlatform });\r\n      \r\n      const result = await this.terminalService.execute(deleteCommand, {\r\n        cwd: this.repositoryPath,\r\n        timeout: 5000\r\n      });\r\n      \r\n      if (isSuccess(result) && result.value.exitCode === 0) {\r\n        this.logger.debug('Temp file cleaned up successfully', { tempFile });\r\n      } else {\r\n        this.logger.warn('Temp file cleanup may have failed', { \r\n          tempFile, \r\n          exitCode: isSuccess(result) ? result.value.exitCode : undefined,\r\n          stderr: isSuccess(result) ? result.value.stderr : undefined,\r\n          stdout: isSuccess(result) ? result.value.stdout : undefined\r\n        });\r\n      }\r\n    } catch (error) {\r\n      this.logger.error('Failed to clean up temp file', { tempFile, error });\r\n    }\r\n  }\r\n} ", "import { ITerminalService } from '@codestate/core/domain/ports/ITerminalService';\r\nimport { TerminalCommand, TerminalResult, TerminalOptions } from '@codestate/core/domain/models/Terminal';\r\nimport { Result, isFailure } from '@codestate/core/domain/models/Result';\r\nimport { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\nimport { TerminalError, ErrorCode } from '@codestate/core/domain/types/ErrorTypes';\r\nimport { spawn, SpawnOptions } from 'child_process';\r\nimport { platform } from 'os';\r\nimport * as path from 'path';\r\n\r\nexport class TerminalService implements ITerminalService {\r\n  constructor(private logger: ILoggerService) {}\r\n\r\n  async execute(command: string, options?: TerminalOptions): Promise<Result<TerminalResult>> {\r\n    this.logger.debug('TerminalService.execute called', { command, options });\r\n    \r\n    const terminalCommand: TerminalCommand = {\r\n      command,\r\n      ...options\r\n    };\r\n    \r\n    return this.executeCommand(terminalCommand);\r\n  }\r\n\r\n  async executeCommand(command: TerminalCommand): Promise<Result<TerminalResult>> {\r\n    this.logger.debug('TerminalService.executeCommand called', { command });\r\n    \r\n    const startTime = Date.now();\r\n    \r\n    try {\r\n      // Validate command\r\n      if (!command.command || command.command.trim().length === 0) {\r\n        return { ok: false, error: new TerminalError('Command cannot be empty', ErrorCode.TERMINAL_COMMAND_FAILED) };\r\n      }\r\n\r\n      // Remove the isCommandAvailable check to prevent circular dependency\r\n      // const isAvailable = await this.isCommandAvailable(command.command.split(' ')[0]);\r\n      // if (!isAvailable.ok || !isAvailable.value) {\r\n      //   this.logger.warn('Command may not be available', { command: command.command });\r\n      // }\r\n\r\n      // Prepare spawn options\r\n      const spawnOptions: SpawnOptions = {\r\n        cwd: command.cwd || process.cwd(),\r\n        env: { ...process.env, ...command.env },\r\n        shell: this.getDefaultShell(),\r\n        timeout: command.timeout || 30000, // 30 seconds default\r\n      };\r\n\r\n      // Parse command and arguments\r\n      const [cmd, args] = this.parseCommand(command.command);\r\n\r\n      // Execute command\r\n      const result = await this.spawnCommand(cmd, args, spawnOptions);\r\n      const duration = Date.now() - startTime;\r\n\r\n      const terminalResult: TerminalResult = {\r\n        success: result.exitCode === 0,\r\n        exitCode: result.exitCode,\r\n        stdout: result.stdout,\r\n        stderr: result.stderr,\r\n        duration,\r\n      };\r\n\r\n      this.logger.log('Command executed', { \r\n        command: command.command, \r\n        exitCode: result.exitCode, \r\n        duration,\r\n        success: terminalResult.success \r\n      });\r\n\r\n      return { ok: true, value: terminalResult };\r\n    } catch (error) {\r\n      const duration = Date.now() - startTime;\r\n      this.logger.error('Command execution failed', { command: command.command, error, duration });\r\n      \r\n      return { \r\n        ok: false, \r\n        error: new TerminalError(\r\n          `Command execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n          ErrorCode.TERMINAL_COMMAND_FAILED\r\n        ) \r\n      };\r\n    }\r\n  }\r\n\r\n  async executeBatch(commands: TerminalCommand[]): Promise<Result<TerminalResult[]>> {\r\n    this.logger.debug('TerminalService.executeBatch called', { count: commands.length });\r\n    \r\n    const results: TerminalResult[] = [];\r\n    \r\n    for (const command of commands) {\r\n      const result = await this.executeCommand(command);\r\n      if (isFailure(result)) {\r\n        this.logger.error('Batch execution failed', { command: command.command, error: (result as any).error });\r\n        return { ok: false, error: (result as any).error };\r\n      }\r\n      results.push(result.value);\r\n    }\r\n    \r\n    this.logger.log('Batch execution completed', { count: results.length });\r\n    return { ok: true, value: results };\r\n  }\r\n\r\n  async spawnTerminal(command: string, options?: TerminalOptions): Promise<Result<boolean>> {\r\n    this.logger.debug('TerminalService.spawnTerminal called', { command, options });\r\n    \r\n    const terminalCommand: TerminalCommand = {\r\n      command,\r\n      ...options\r\n    };\r\n    \r\n    return this.spawnTerminalCommand(terminalCommand);\r\n  }\r\n\r\n  async spawnTerminalCommand(command: TerminalCommand): Promise<Result<boolean>> {\r\n    this.logger.debug('TerminalService.spawnTerminalCommand called', { command });\r\n    \r\n    try {\r\n      // Validate command\r\n      if (!command.command || command.command.trim().length === 0) {\r\n        return { ok: false, error: new TerminalError('Command cannot be empty', ErrorCode.TERMINAL_COMMAND_FAILED) };\r\n      }\r\n\r\n      // Get the appropriate terminal command for the current platform\r\n      const terminalCmd = this.getTerminalCommand();\r\n      const shell = this.getDefaultShell();\r\n      \r\n      // Prepare spawn options\r\n      const spawnOptions: SpawnOptions = {\r\n        cwd: command.cwd || process.cwd(),\r\n        env: { ...process.env, ...command.env },\r\n        detached: true, // Important: run in detached mode so it opens in a new window\r\n        stdio: 'ignore', // Ignore stdio to prevent hanging\r\n      };\r\n\r\n      // Parse the command to execute\r\n      const [cmd, args] = this.parseCommand(command.command);\r\n      \r\n      // Create the full command string for the terminal\r\n      const fullCommand = `${cmd} ${args.join(' ')}`;\r\n      \r\n      // Spawn the terminal with the command\r\n      const terminalArgs = this.getTerminalArgs(terminalCmd, shell, fullCommand, command.cwd);\r\n      \r\n      const child = spawn(terminalCmd, terminalArgs, spawnOptions);\r\n      \r\n      // Don't wait for the process to complete since it's a new terminal window\r\n      child.unref();\r\n      \r\n      this.logger.log('Terminal spawned successfully', { \r\n        command: command.command, \r\n        terminalCmd,\r\n        terminalArgs \r\n      });\r\n      \r\n      return { ok: true, value: true };\r\n    } catch (error) {\r\n      this.logger.error('Failed to spawn terminal', { command: command.command, error });\r\n      \r\n      return { \r\n        ok: false, \r\n        error: new TerminalError(\r\n          `Failed to spawn terminal: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n          ErrorCode.TERMINAL_COMMAND_FAILED\r\n        ) \r\n      };\r\n    }\r\n  }\r\n\r\n  async isCommandAvailable(command: string): Promise<Result<boolean>> {\r\n    this.logger.debug('TerminalService.isCommandAvailable called', { command });\r\n    \r\n    try {\r\n      const osPlatform = platform();\r\n      \r\n      if (osPlatform === 'win32') {\r\n        // On Windows, check if the command is a full path to an executable\r\n        if (command.includes('\\\\') && command.endsWith('.exe')) {\r\n          // It's a full path, check if file exists\r\n          const fs = await import('fs');\r\n          const exists = fs.existsSync(command);\r\n          return { ok: true, value: exists };\r\n        } else {\r\n          // Try to find it in PATH using PowerShell's Get-Command\r\n          const result = await this.executeCommand({ \r\n            command: `powershell -Command \"Get-Command '${command}' -ErrorAction SilentlyContinue\"`, \r\n            timeout: 5000 \r\n          });\r\n          return { ok: true, value: result.ok && result.value.success && result.value.stdout.trim() !== '' };\r\n        }\r\n      } else {\r\n        // On Unix-like systems, use 'which' command\r\n        const result = await this.executeCommand({ \r\n          command: `which ${command}`, \r\n          timeout: 5000 \r\n        });\r\n        return { ok: true, value: result.ok && result.value.success };\r\n      }\r\n    } catch (error) {\r\n      this.logger.debug('Command availability check failed', { command, error });\r\n      return { ok: true, value: false };\r\n    }\r\n  }\r\n\r\n  async getShell(): Promise<Result<string>> {\r\n    this.logger.debug('TerminalService.getShell called');\r\n    \r\n    try {\r\n      const shell = this.getDefaultShell();\r\n      this.logger.log('Shell detected', { shell });\r\n      return { ok: true, value: shell };\r\n    } catch (error) {\r\n      this.logger.error('Failed to get shell', { error });\r\n      return { ok: false, error: new TerminalError('Failed to get shell', ErrorCode.TERMINAL_COMMAND_FAILED) };\r\n    }\r\n  }\r\n\r\n  private getDefaultShell(): string {\r\n    const osPlatform = platform();\r\n    \r\n    switch (osPlatform) {\r\n      case 'win32':\r\n        return process.env.COMSPEC || 'cmd.exe';\r\n      case 'darwin':\r\n        return process.env.SHELL || '/bin/zsh';\r\n      default: // linux, freebsd, etc.\r\n        return process.env.SHELL || '/bin/bash';\r\n    }\r\n  }\r\n\r\n  private getTerminalCommand(): string {\r\n    const osPlatform = platform();\r\n    if (osPlatform === 'win32') {\r\n      return 'cmd.exe';\r\n    } else if (osPlatform === 'darwin') {\r\n      return 'open';\r\n    } else {\r\n      // Linux - try common terminal emulators\r\n      return 'gnome-terminal';\r\n    }\r\n  }\r\n\r\n  private getTerminalArgs(terminalCmd: string, shell: string, command: string, cwd?: string): string[] {\r\n    const args: string[] = [];\r\n    \r\n    if (terminalCmd === 'cmd.exe') {\r\n      // Windows\r\n      args.push('/c', 'start', 'cmd', '/k', command);\r\n    } else if (terminalCmd === 'open') {\r\n      // macOS\r\n      args.push('-a', 'Terminal', command);\r\n    } else {\r\n      // Linux - gnome-terminal\r\n      args.push('--', shell, '-c', command);\r\n      if (cwd) {\r\n        args.unshift('--working-directory', cwd);\r\n      }\r\n    }\r\n    \r\n    return args;\r\n  }\r\n\r\n  private parseCommand(commandString: string): [string, string[]] {\r\n    // Simple command parsing - split by spaces, handle quotes\r\n    const parts = commandString.match(/(?:[^\\s\"']+|\"[^\"]*\"|'[^']*')/g) || [];\r\n    const cmd = parts[0] || '';\r\n    const args = parts.slice(1).map(arg => {\r\n      // Remove quotes if present\r\n      if ((arg.startsWith('\"') && arg.endsWith('\"')) || (arg.startsWith(\"'\") && arg.endsWith(\"'\"))) {\r\n        return arg.slice(1, -1);\r\n      }\r\n      return arg;\r\n    });\r\n    \r\n    return [cmd, args];\r\n  }\r\n\r\n  private spawnCommand(command: string, args: string[], options: SpawnOptions): Promise<{ exitCode: number; stdout: string; stderr: string }> {\r\n    return new Promise((resolve, reject) => {\r\n      const process = spawn(command, args, options);\r\n      \r\n      let stdout = '';\r\n      let stderr = '';\r\n      \r\n      // Set up timeout\r\n      const timeout = setTimeout(() => {\r\n        process.kill('SIGTERM');\r\n        reject(new TerminalError('Command timed out', ErrorCode.TERMINAL_TIMEOUT));\r\n      }, options.timeout || 30000);\r\n      \r\n      // Collect stdout\r\n      process.stdout?.on('data', (data) => {\r\n        stdout += data.toString();\r\n      });\r\n      \r\n      // Collect stderr\r\n      process.stderr?.on('data', (data) => {\r\n        stderr += data.toString();\r\n      });\r\n      \r\n      // Handle process completion\r\n      process.on('close', (code) => {\r\n        clearTimeout(timeout);\r\n        resolve({\r\n          exitCode: code || 0,\r\n          stdout: stdout.trim(),\r\n          stderr: stderr.trim()\r\n        });\r\n      });\r\n      \r\n      // Handle process errors\r\n      process.on('error', (error) => {\r\n        clearTimeout(timeout);\r\n        reject(new TerminalError(`Process error: ${error.message}`, ErrorCode.TERMINAL_COMMAND_FAILED));\r\n      });\r\n      \r\n      // Handle process exit with signal\r\n      process.on('exit', (code, signal) => {\r\n        clearTimeout(timeout);\r\n        if (signal) {\r\n          reject(new TerminalError(`Process killed by signal: ${signal}`, ErrorCode.TERMINAL_COMMAND_FAILED));\r\n        } else {\r\n          resolve({\r\n            exitCode: code || 0,\r\n            stdout: stdout.trim(),\r\n            stderr: stderr.trim()\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n} ", "// Main entry point for CLI/IDE to interact with Git (no DI required)\r\nimport { GitService } from '@codestate/core/services/git/GitService';\r\nimport { TerminalService } from '@codestate/infrastructure/services/Terminal/TerminalService';\r\nimport { FileLogger } from '@codestate/infrastructure/services/FileLogger';\r\nimport { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\nimport { ITerminalService } from '@codestate/core/domain/ports/ITerminalService';\r\nimport * as path from 'path';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\n\r\nexport class GitFacade implements IGitService {\r\n  private service: GitService;\r\n\r\n  constructor(\r\n    repositoryPath?: string,\r\n    logger?: ILoggerService,\r\n    terminalService?: ITerminalService\r\n  ) {\r\n    const _logger = logger || new FileLogger({ \r\n      level: 'LOG', \r\n      sinks: ['file'],\r\n      filePath: path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate', 'logs', 'codestate.log')\r\n    });\r\n    const _terminalService = terminalService || new TerminalService(_logger);\r\n    this.service = new GitService(_terminalService, _logger, repositoryPath);\r\n  }\r\n  async getCurrentCommit(...args: Parameters<IGitService['getCurrentCommit']>) {\r\n    return this.service.getCurrentCommit(...args);\r\n  }\r\n\r\n  async isGitConfigured(...args: Parameters<IGitService['isGitConfigured']>) {\r\n    return this.service.isGitConfigured(...args);\r\n  }\r\n\r\n  async commitChanges(...args: Parameters<IGitService['commitChanges']>) {\r\n    return this.service.commitChanges(...args);\r\n  }\r\n\r\n  async getIsDirty(...args: Parameters<IGitService['getIsDirty']>) {\r\n    return this.service.getIsDirty(...args);\r\n  }\r\n\r\n  async getDirtyData(...args: Parameters<IGitService['getDirtyData']>) {\r\n    return this.service.getDirtyData(...args);\r\n  }\r\n\r\n  async getStatus(...args: Parameters<IGitService['getStatus']>) {\r\n    return this.service.getStatus(...args);\r\n  }\r\n\r\n  async createStash(...args: Parameters<IGitService['createStash']>) {\r\n    return this.service.createStash(...args);\r\n  }\r\n\r\n  async applyStash(...args: Parameters<IGitService['applyStash']>) {\r\n    return this.service.applyStash(...args);\r\n  }\r\n\r\n  async listStashes(...args: Parameters<IGitService['listStashes']>) {\r\n    return this.service.listStashes(...args);\r\n  }\r\n\r\n  async deleteStash(...args: Parameters<IGitService['deleteStash']>) {\r\n    return this.service.deleteStash(...args);\r\n  }\r\n\r\n  async isGitRepository(...args: Parameters<IGitService['isGitRepository']>) {\r\n    return this.service.isGitRepository(...args);\r\n  }\r\n\r\n  async getCurrentBranch(...args: Parameters<IGitService['getCurrentBranch']>) {\r\n    return this.service.getCurrentBranch(...args);\r\n  }\r\n\r\n  async getRepositoryRoot(...args: Parameters<IGitService['getRepositoryRoot']>) {\r\n    return this.service.getRepositoryRoot(...args);\r\n  }\r\n} ", "import { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { GitStatus } from '@codestate/core/domain/models/Git';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { GitFacade } from '@codestate/core/services/git/GitFacade';\r\n\r\nexport class GetGitStatus {\r\n  private gitService: IGitService;\r\n  \r\n  constructor(gitService?: IGitService, repositoryPath?: string) {\r\n    this.gitService = gitService || new GitFacade(repositoryPath);\r\n  }\r\n  \r\n  async execute(): Promise<Result<GitStatus>> {\r\n    return this.gitService.getStatus();\r\n  }\r\n} ", "import { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { GitFacade } from '@codestate/core/services/git/GitFacade';\r\n\r\nexport class GetIsDirty {\r\n  private gitService: IGitService;\r\n  \r\n  constructor(gitService?: IGitService, repositoryPath?: string) {\r\n    this.gitService = gitService || new GitFacade(repositoryPath);\r\n  }\r\n  \r\n  async execute(): Promise<Result<boolean>> {\r\n    return this.gitService.getIsDirty();\r\n  }\r\n} ", "import { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { GitStatus } from '@codestate/core/domain/models/Git';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { GitFacade } from '@codestate/core/services/git/GitFacade';\r\n\r\nexport class GetDirtyData {\r\n  private gitService: IGitService;\r\n  \r\n  constructor(gitService?: IGitService, repositoryPath?: string) {\r\n    this.gitService = gitService || new GitFacade(repositoryPath);\r\n  }\r\n  \r\n  async execute(): Promise<Result<GitStatus>> {\r\n    return this.gitService.getDirtyData();\r\n  }\r\n} ", "import { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { GitStashResult } from '@codestate/core/domain/models/Git';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { GitFacade } from '@codestate/core/services/git/GitFacade';\r\n\r\nexport class CreateStash {\r\n  private gitService: IGitService;\r\n  \r\n  constructor(gitService?: IGitService, repositoryPath?: string) {\r\n    this.gitService = gitService || new GitFacade(repositoryPath);\r\n  }\r\n  \r\n  async execute(message?: string): Promise<Result<GitStashResult>> {\r\n    return this.gitService.createStash(message);\r\n  }\r\n} ", "import { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { GitStashApplyResult } from '@codestate/core/domain/models/Git';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { GitFacade } from '@codestate/core/services/git/GitFacade';\r\n\r\nexport class ApplyStash {\r\n  private gitService: IGitService;\r\n  \r\n  constructor(gitService?: IGitService, repositoryPath?: string) {\r\n    this.gitService = gitService || new GitFacade(repositoryPath);\r\n  }\r\n  \r\n  async execute(stashName: string): Promise<Result<GitStashApplyResult>> {\r\n    return this.gitService.applyStash(stashName);\r\n  }\r\n} ", "import { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { GitStash } from '@codestate/core/domain/models/Git';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { GitFacade } from '@codestate/core/services/git/GitFacade';\r\n\r\nexport class ListStashes {\r\n  private gitService: IGitService;\r\n  \r\n  constructor(gitService?: IGitService, repositoryPath?: string) {\r\n    this.gitService = gitService || new GitFacade(repositoryPath);\r\n  }\r\n  \r\n  async execute(): Promise<Result<GitStash[]>> {\r\n    return this.gitService.listStashes();\r\n  }\r\n} ", "import { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { GitFacade } from '@codestate/core/services/git/GitFacade';\r\n\r\nexport class DeleteStash {\r\n  private gitService: IGitService;\r\n  \r\n  constructor(gitService?: IGitService, repositoryPath?: string) {\r\n    this.gitService = gitService || new GitFacade(repositoryPath);\r\n  }\r\n  \r\n  async execute(stashName: string): Promise<Result<boolean>> {\r\n    return this.gitService.deleteStash(stashName);\r\n  }\r\n} ", "import { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { GitFacade } from '@codestate/core/services/git/GitFacade';\r\n\r\nexport class GetCurrentCommit {\r\n  private gitService: IGitService;\r\n  \r\n  constructor(gitService?: IGitService) {\r\n    this.gitService = gitService || new GitFacade();\r\n  }\r\n  \r\n  async execute(): Promise<Result<string>> {\r\n    return this.gitService.getCurrentCommit();\r\n  }\r\n} ", "import { IGitService } from '@codestate/core/domain/ports/IGitService';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { GitFacade } from '@codestate/core/services/git/GitFacade';\r\n\r\nexport class CommitChanges {\r\n  private gitService: IGitService;\r\n  \r\n  constructor(gitService?: IGitService) {\r\n    this.gitService = gitService || new GitFacade();\r\n  }\r\n  \r\n  async execute(message: string): Promise<Result<boolean>> {\r\n    return this.gitService.commitChanges(message);\r\n  }\r\n} ", "import { IIDEService } from '../../domain/ports/IIDEService';\r\nimport { IIDERepository } from '../../domain/ports/IIDERepository';\r\nimport { ITerminalService } from '../../domain/ports/ITerminalService';\r\nimport { ILoggerService } from '../../domain/ports/ILoggerService';\r\nimport { IDE, FileOpenRequest } from '../../domain/models/IDE';\r\nimport { Result, isFailure } from '../../domain/models/Result';\r\nimport { platform } from 'os';\r\n\r\nexport class IDEService implements IIDEService {\r\n  constructor(\r\n    private repository: IIDERepository,\r\n    private terminalService: ITerminalService,\r\n    private logger: ILoggerService\r\n  ) {}\r\n\r\n  async openIDE(ideName: string, projectRoot: string): Promise<Result<boolean>> {\r\n    this.logger.debug('IDEService.openIDE called', { ideName, projectRoot });\r\n    \r\n    try {\r\n      // Check if IDE is installed\r\n      const isInstalledResult = await this.isIDEInstalled(ideName);\r\n      if (!isInstalledResult.ok || !isInstalledResult.value) {\r\n        this.logger.error('IDE is not installed', { ideName });\r\n        return { ok: false, error: new Error(`IDE '${ideName}' is not installed`) };\r\n      }\r\n\r\n      // Get IDE definition\r\n      const idesResult = await this.getAvailableIDEs();\r\n      if (isFailure(idesResult)) {\r\n        this.logger.error('Failed to get IDE definitions', { error: idesResult.error });\r\n        return { ok: false, error: idesResult.error };\r\n      }\r\n\r\n      const ide = idesResult.value.find(i => i.name === ideName);\r\n      if (!ide) {\r\n        this.logger.error('IDE definition not found', { ideName });\r\n        return { ok: false, error: new Error(`IDE definition for '${ideName}' not found`) };\r\n      }\r\n\r\n      // Check platform compatibility\r\n      const currentPlatform = platform();\r\n      if (!ide.supportedPlatforms.includes(currentPlatform)) {\r\n        this.logger.error('IDE not supported on current platform', { ideName, currentPlatform });\r\n        return { ok: false, error: new Error(`IDE '${ideName}' is not supported on ${currentPlatform}`) };\r\n      }\r\n\r\n      // Build command with project root\r\n      const args = [...ide.args, projectRoot];\r\n      const command = `${ide.command} ${args.join(' ')}`;\r\n\r\n      // Execute IDE command\r\n      const result = await this.terminalService.spawnTerminal(command, {\r\n        cwd: projectRoot,\r\n        timeout: 10000\r\n      });\r\n\r\n      if (isFailure(result)) {\r\n        this.logger.error('Failed to open IDE', { error: result.error, ideName, command });\r\n        return { ok: false, error: result.error };\r\n      }\r\n\r\n      this.logger.log('IDE opened successfully', { ideName, projectRoot });\r\n      return { ok: true, value: true };\r\n    } catch (error) {\r\n      this.logger.error('Failed to open IDE', { error, ideName, projectRoot });\r\n      return { ok: false, error: error instanceof Error ? error : new Error('Failed to open IDE') };\r\n    }\r\n  }\r\n\r\n  async openFiles(request: FileOpenRequest): Promise<Result<boolean>> {\r\n    this.logger.debug('IDEService.openFiles called', { request });\r\n    \r\n    try {\r\n      // Check if IDE is installed\r\n      const isInstalledResult = await this.isIDEInstalled(request.ide);\r\n      if (!isInstalledResult.ok || !isInstalledResult.value) {\r\n        this.logger.error('IDE is not installed', { ide: request.ide });\r\n        return { ok: false, error: new Error(`IDE '${request.ide}' is not installed`) };\r\n      }\r\n\r\n      // Get IDE definition\r\n      const idesResult = await this.getAvailableIDEs();\r\n      if (isFailure(idesResult)) {\r\n        this.logger.error('Failed to get IDE definitions', { error: idesResult.error });\r\n        return { ok: false, error: idesResult.error };\r\n      }\r\n\r\n      const ide = idesResult.value.find(i => i.name === request.ide);\r\n      if (!ide) {\r\n        this.logger.error('IDE definition not found', { ide: request.ide });\r\n        return { ok: false, error: new Error(`IDE definition for '${request.ide}' not found`) };\r\n      }\r\n\r\n      // Build file opening command\r\n      const fileArgs = request.files.map(file => {\r\n        let fileArg = file.path;\r\n        if (file.line && file.column) {\r\n          fileArg += `:${file.line}:${file.column}`;\r\n        } else if (file.line) {\r\n          fileArg += `:${file.line}`;\r\n        }\r\n        return fileArg;\r\n      });\r\n\r\n      const args = [...ide.args, request.projectRoot, ...fileArgs];\r\n      const command = `${ide.command} ${args.join(' ')}`;\r\n\r\n      // Execute file opening command\r\n      const result = await this.terminalService.spawnTerminal(command, {\r\n        cwd: request.projectRoot,\r\n        timeout: 10000\r\n      });\r\n\r\n      if (isFailure(result)) {\r\n        this.logger.error('Failed to open files', { error: result.error, request, command });\r\n        return { ok: false, error: result.error };\r\n      }\r\n\r\n      this.logger.log('Files opened successfully', { request });\r\n      return { ok: true, value: true };\r\n    } catch (error) {\r\n      this.logger.error('Failed to open files', { error, request });\r\n      return { ok: false, error: error instanceof Error ? error : new Error('Failed to open files') };\r\n    }\r\n  }\r\n\r\n  async getAvailableIDEs(): Promise<Result<IDE[]>> {\r\n    this.logger.debug('IDEService.getAvailableIDEs called');\r\n    \r\n    try {\r\n      const result = await this.repository.getIDEDefinitions();\r\n      if (isFailure(result)) {\r\n        this.logger.error('Failed to get IDE definitions', { error: result.error });\r\n        return { ok: false, error: result.error };\r\n      }\r\n\r\n      this.logger.log('IDE definitions retrieved', { count: result.value.length });\r\n      return { ok: true, value: result.value };\r\n    } catch (error) {\r\n      this.logger.error('Failed to get available IDEs', { error });\r\n      return { ok: false, error: error instanceof Error ? error : new Error('Failed to get available IDEs') };\r\n    }\r\n  }\r\n\r\n  async isIDEInstalled(ideName: string): Promise<Result<boolean>> {\r\n    this.logger.debug('IDEService.isIDEInstalled called', { ideName });\r\n    \r\n    try {\r\n      // Get IDE definition\r\n      const idesResult = await this.getAvailableIDEs();\r\n      if (isFailure(idesResult)) {\r\n        return { ok: false, error: idesResult.error };\r\n      }\r\n\r\n      const ide = idesResult.value.find(i => i.name === ideName);\r\n      if (!ide) {\r\n        return { ok: true, value: false };\r\n      }\r\n\r\n      // Check if command is available\r\n      const result = await this.terminalService.isCommandAvailable(ide.command);\r\n      if (isFailure(result)) {\r\n        this.logger.error('Failed to check IDE availability', { error: result.error, ideName });\r\n        return { ok: false, error: result.error };\r\n      }\r\n\r\n      this.logger.log('IDE installation check completed', { ideName, isInstalled: result.value });\r\n      return { ok: true, value: result.value };\r\n    } catch (error) {\r\n      this.logger.error('Failed to check IDE installation', { error, ideName });\r\n      return { ok: false, error: error instanceof Error ? error : new Error('Failed to check IDE installation') };\r\n    }\r\n  }\r\n} ", "import { IIDERepository } from '@codestate/core/domain/ports/IIDERepository';\r\nimport { IDE } from '@codestate/core/domain/models/IDE';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport { platform } from 'os';\r\n\r\nexport class IDERepository implements IIDERepository {\r\n  async getIDEDefinitions(): Promise<Result<IDE[]>> {\r\n    const currentPlatform = platform();\r\n    \r\n    // Get user profile path for Windows\r\n    const localAppData = process.env.LOCALAPPDATA;\r\n    \r\n    // Default IDE definitions\r\n    const defaultIDEs: IDE[] = [\r\n      {\r\n        name: 'vscode',\r\n        command: 'code',\r\n        args: ['--new-window'],\r\n        supportedPlatforms: ['win32', 'darwin', 'linux']\r\n      },\r\n      {\r\n        name: 'code',\r\n        command: 'code',\r\n        args: ['--new-window'],\r\n        supportedPlatforms: ['win32', 'darwin', 'linux']\r\n      },\r\n      {\r\n        name: 'cursor',\r\n        command: currentPlatform === 'win32' ? `${localAppData}\\\\Programs\\\\cursor\\\\Cursor.exe` : 'cursor',\r\n        args: ['--new-window'],\r\n        supportedPlatforms: ['win32', 'darwin', 'linux']\r\n      },\r\n      {\r\n        name: 'webstorm',\r\n        command: 'webstorm',\r\n        args: [],\r\n        supportedPlatforms: ['win32', 'darwin', 'linux']\r\n      },\r\n      {\r\n        name: 'intellij',\r\n        command: 'idea',\r\n        args: [],\r\n        supportedPlatforms: ['win32', 'darwin', 'linux']\r\n      },\r\n      {\r\n        name: 'sublime',\r\n        command: 'subl',\r\n        args: [],\r\n        supportedPlatforms: ['win32', 'darwin', 'linux']\r\n      },\r\n      {\r\n        name: 'vim',\r\n        command: 'vim',\r\n        args: [],\r\n        supportedPlatforms: ['win32', 'darwin', 'linux']\r\n      },\r\n      {\r\n        name: 'neovim',\r\n        command: 'nvim',\r\n        args: [],\r\n        supportedPlatforms: ['win32', 'darwin', 'linux']\r\n      }\r\n    ];\r\n\r\n    // Filter IDEs for current platform\r\n    const platformIDEs = defaultIDEs.filter(ide => \r\n      ide.supportedPlatforms.includes(currentPlatform)\r\n    );\r\n\r\n    return { ok: true, value: platformIDEs };\r\n  }\r\n\r\n  async saveIDEDefinitions(ides: IDE[]): Promise<Result<void>> {\r\n    // For now, we use default definitions\r\n    // In the future, this could save to a config file\r\n    return { ok: true, value: undefined };\r\n  }\r\n} ", "// Main entry point for CLI/IDE to interact with Terminal (no DI required)\r\nimport { TerminalService } from '@codestate/infrastructure/services/Terminal/TerminalService';\r\nimport { FileLogger } from '@codestate/infrastructure/services/FileLogger';\r\nimport { ITerminalService } from '@codestate/core/domain/ports/ITerminalService';\r\nimport { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\nimport { TerminalCommand, TerminalResult, TerminalOptions } from '@codestate/core/domain/models/Terminal';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\nimport * as path from 'path';\r\n\r\nexport class TerminalFacade implements ITerminalService {\r\n  private service: TerminalService;\r\n\r\n  constructor(logger?: ILoggerService) {\r\n    const _logger = logger || new FileLogger({ \r\n      level: 'LOG', \r\n      sinks: ['file'],\r\n      filePath: path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate', 'logs', 'codestate.log')\r\n    });\r\n    this.service = new TerminalService(_logger);\r\n  }\r\n\r\n  async execute(command: string, options?: TerminalOptions): Promise<Result<TerminalResult>> {\r\n    return this.service.execute(command, options);\r\n  }\r\n\r\n  async executeCommand(command: TerminalCommand): Promise<Result<TerminalResult>> {\r\n    return this.service.executeCommand(command);\r\n  }\r\n\r\n  async executeBatch(commands: TerminalCommand[]): Promise<Result<TerminalResult[]>> {\r\n    return this.service.executeBatch(commands);\r\n  }\r\n\r\n  async spawnTerminal(command: string, options?: TerminalOptions): Promise<Result<boolean>> {\r\n    return this.service.spawnTerminal(command, options);\r\n  }\r\n\r\n  async spawnTerminalCommand(command: TerminalCommand): Promise<Result<boolean>> {\r\n    return this.service.spawnTerminalCommand(command);\r\n  }\r\n\r\n  async isCommandAvailable(command: string): Promise<Result<boolean>> {\r\n    return this.service.isCommandAvailable(command);\r\n  }\r\n\r\n  async getShell(): Promise<Result<string>> {\r\n    return this.service.getShell();\r\n  }\r\n} ", "import { IIDEService } from '../../domain/ports/IIDEService';\r\nimport { IDEService } from './IDEService';\r\nimport { IDERepository } from '@codestate/infrastructure/repositories/IDERepository';\r\nimport { TerminalFacade } from '@codestate/infrastructure/services/Terminal/TerminalFacade';\r\nimport * as path from 'path';\r\nimport { FileLogger } from '@codestate/infrastructure/services/FileLogger';\r\n\r\nexport class IDEFacade implements IIDEService {\r\n  private service: IDEService;\r\n\r\n  constructor() {\r\n    const repository = new IDERepository();\r\n    const terminalService = new TerminalFacade();\r\n    const logger =new FileLogger({ \r\n      level: 'LOG', \r\n      sinks: ['file'],\r\n      filePath: path.join(process.env.HOME || process.env.USERPROFILE || '.', '.codestate', 'logs', 'codestate.log')\r\n    });\r\n    this.service = new IDEService(repository, terminalService, logger);\r\n  }\r\n\r\n  async openIDE(ideName: string, projectRoot: string) {\r\n    return this.service.openIDE(ideName, projectRoot);\r\n  }\r\n\r\n  async openFiles(request: any) {\r\n    return this.service.openFiles(request);\r\n  }\r\n\r\n  async getAvailableIDEs() {\r\n    return this.service.getAvailableIDEs();\r\n  }\r\n\r\n  async isIDEInstalled(ideName: string) {\r\n    return this.service.isIDEInstalled(ideName);\r\n  }\r\n} ", "import { IIDEService } from '@codestate/core/domain/ports/IIDEService';\r\nimport { IDEFacade } from '@codestate/core/services/ide/IDEFacade';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\n\r\nexport class OpenIDE {\r\n  private ideService: IIDEService;\r\n  \r\n  constructor(ideService?: IIDEService) {\r\n    this.ideService = ideService || new IDEFacade();\r\n  }\r\n  \r\n  async execute(ideName: string, projectRoot: string): Promise<Result<boolean>> {\r\n    return this.ideService.openIDE(ideName, projectRoot);\r\n  }\r\n} ", "import { IIDEService } from '@codestate/core/domain/ports/IIDEService';\r\nimport { IDEFacade } from '@codestate/core/services/ide/IDEFacade';\r\nimport { FileOpenRequest } from '@codestate/core/domain/models/IDE';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\n\r\nexport class OpenFiles {\r\n  private ideService: IIDEService;\r\n  \r\n  constructor(ideService?: IIDEService) {\r\n    this.ideService = ideService || new IDEFacade();\r\n  }\r\n  \r\n  async execute(request: FileOpenRequest): Promise<Result<boolean>> {\r\n    return this.ideService.openFiles(request);\r\n  }\r\n} ", "import { IIDEService } from '@codestate/core/domain/ports/IIDEService';\r\nimport { IDEFacade } from '@codestate/core/services/ide/IDEFacade';\r\nimport { IDE } from '@codestate/core/domain/models/IDE';\r\nimport { Result } from '@codestate/core/domain/models/Result';\r\n\r\nexport class GetAvailableIDEs {\r\n  private ideService: IIDEService;\r\n  \r\n  constructor(ideService?: IIDEService) {\r\n    this.ideService = ideService || new IDEFacade();\r\n  }\r\n  \r\n  async execute(): Promise<Result<IDE[]>> {\r\n    return this.ideService.getAvailableIDEs();\r\n  }\r\n} ", "// ErrorRegistry for mapping error codes to user messages and exit codes\r\nimport { ErrorCode } from './ErrorTypes';\r\n\r\nexport interface ErrorRegistryEntry {\r\n  code: ErrorCode;\r\n  userMessage: string;\r\n  exitCode: number;\r\n}\r\n\r\nexport const ErrorRegistry: Record<ErrorCode, ErrorRegistryEntry> = {\r\n  [ErrorCode.UNKNOWN]: {\r\n    code: ErrorCode.UNKNOWN,\r\n    userMessage: 'An unknown error occurred.',\r\n    exitCode: 1,\r\n  },\r\n  [ErrorCode.CONFIG_INVALID]: {\r\n    code: ErrorCode.CONFIG_INVALID,\r\n    userMessage: 'Configuration is invalid.',\r\n    exitCode: 2,\r\n  },\r\n  [ErrorCode.STORAGE_INVALID_PATH]: {\r\n    code: ErrorCode.STORAGE_INVALID_PATH,\r\n    userMessage: 'Invalid file path.',\r\n    exitCode: 3,\r\n  },\r\n  [ErrorCode.STORAGE_DECRYPTION_FAILED]: {\r\n    code: ErrorCode.STORAGE_DECRYPTION_FAILED,\r\n    userMessage: 'Decryption failed during storage operation.',\r\n    exitCode: 4,\r\n  },\r\n  [ErrorCode.STORAGE_READ_FAILED]: {\r\n    code: ErrorCode.STORAGE_READ_FAILED,\r\n    userMessage: 'File read failed.',\r\n    exitCode: 5,\r\n  },\r\n  [ErrorCode.STORAGE_WRITE_FAILED]: {\r\n    code: ErrorCode.STORAGE_WRITE_FAILED,\r\n    userMessage: 'File write failed.',\r\n    exitCode: 6,\r\n  },\r\n  [ErrorCode.STORAGE_DELETE_FAILED]: {\r\n    code: ErrorCode.STORAGE_DELETE_FAILED,\r\n    userMessage: 'File delete failed.',\r\n    exitCode: 7,\r\n  },\r\n  [ErrorCode.ENCRYPTION_FAILED]: {\r\n    code: ErrorCode.ENCRYPTION_FAILED,\r\n    userMessage: 'Encryption failed.',\r\n    exitCode: 8,\r\n  },\r\n  [ErrorCode.ENCRYPTION_INVALID_FORMAT]: {\r\n    code: ErrorCode.ENCRYPTION_INVALID_FORMAT,\r\n    userMessage: 'Invalid encrypted data format.',\r\n    exitCode: 9,\r\n  },\r\n  [ErrorCode.SCRIPT_INVALID]: {\r\n    code: ErrorCode.SCRIPT_INVALID,\r\n    userMessage: 'Script is invalid.',\r\n    exitCode: 10,\r\n  },\r\n  [ErrorCode.SCRIPT_DUPLICATE]: {\r\n    code: ErrorCode.SCRIPT_DUPLICATE,\r\n    userMessage: 'Script already exists.',\r\n    exitCode: 11,\r\n  },\r\n  [ErrorCode.SCRIPT_NOT_FOUND]: {\r\n    code: ErrorCode.SCRIPT_NOT_FOUND,\r\n    userMessage: 'Script not found.',\r\n    exitCode: 12,\r\n  },\r\n  [ErrorCode.SCRIPT_PATH_INVALID]: {\r\n    code: ErrorCode.SCRIPT_PATH_INVALID,\r\n    userMessage: 'Script path is invalid.',\r\n    exitCode: 13,\r\n  },\r\n  [ErrorCode.SCRIPT_MALICIOUS]: {\r\n    code: ErrorCode.SCRIPT_MALICIOUS,\r\n    userMessage: 'Script contains malicious content.',\r\n    exitCode: 14,\r\n  },\r\n  [ErrorCode.GIT_NOT_REPOSITORY]: {\r\n    code: ErrorCode.GIT_NOT_REPOSITORY,\r\n    userMessage: 'Not a git repository.',\r\n    exitCode: 15,\r\n  },\r\n  [ErrorCode.GIT_COMMAND_FAILED]: {\r\n    code: ErrorCode.GIT_COMMAND_FAILED,\r\n    userMessage: 'Git command failed.',\r\n    exitCode: 16,\r\n  },\r\n  [ErrorCode.GIT_STASH_NOT_FOUND]: {\r\n    code: ErrorCode.GIT_STASH_NOT_FOUND,\r\n    userMessage: 'Git stash not found.',\r\n    exitCode: 17,\r\n  },\r\n  [ErrorCode.GIT_STASH_CONFLICT]: {\r\n    code: ErrorCode.GIT_STASH_CONFLICT,\r\n    userMessage: 'Git stash apply resulted in conflicts.',\r\n    exitCode: 18,\r\n  },\r\n  [ErrorCode.TERMINAL_COMMAND_FAILED]: {\r\n    code: ErrorCode.TERMINAL_COMMAND_FAILED,\r\n    userMessage: 'Terminal command failed.',\r\n    exitCode: 19,\r\n  },\r\n  [ErrorCode.TERMINAL_TIMEOUT]: {\r\n    code: ErrorCode.TERMINAL_TIMEOUT,\r\n    userMessage: 'Terminal command timed out.',\r\n    exitCode: 20,\r\n  },\r\n  [ErrorCode.TERMINAL_COMMAND_NOT_FOUND]: {\r\n    code: ErrorCode.TERMINAL_COMMAND_NOT_FOUND,\r\n    userMessage: 'Terminal command not found.',\r\n    exitCode: 21,\r\n  },\r\n};\r\n\r\nexport function getUserMessageForErrorCode(code: ErrorCode): string {\r\n  return ErrorRegistry[code]?.userMessage || ErrorRegistry[ErrorCode.UNKNOWN].userMessage;\r\n}\r\n\r\nexport function getExitCodeForErrorCode(code: ErrorCode): number {\r\n  return ErrorRegistry[code]?.exitCode || ErrorRegistry[ErrorCode.UNKNOWN].exitCode;\r\n} ", "import { ILoggerService } from '@codestate/core/domain/ports/ILoggerService';\r\n\r\nexport class CLILogger implements ILoggerService {\r\n  \r\n  plainLog(message: string, meta?: Record<string, unknown>): void {\r\n    console.log(message);\r\n    if (meta && Object.keys(meta).length > 0) {\r\n      console.log(meta);\r\n    }\r\n  }\r\n  \r\n  log(message: string, meta?: Record<string, unknown>): void {\r\n    console.log(`\u2705 ${message}`);\r\n    if (meta && Object.keys(meta).length > 0) {\r\n      console.log(meta);\r\n    }\r\n  }\r\n\r\n  error(message: string, meta?: Record<string, unknown>): void {\r\n    console.error(`\u274C ${message}`);\r\n    if (meta && Object.keys(meta).length > 0) {\r\n      console.error(meta);\r\n    }\r\n  }\r\n\r\n  warn(message: string, meta?: Record<string, unknown>): void {\r\n    console.warn(`\u26A0\uFE0F ${message}`);\r\n    if (meta && Object.keys(meta).length > 0) {\r\n      console.error(meta);\r\n    }\r\n  }\r\n\r\n  debug(message: string, meta?: Record<string, unknown>): void {\r\n    // CLI logger filters out debug messages - they're not shown to users\r\n    // This prevents cluttering the CLI output with verbose debug info\r\n  }\r\n} ", "// Main entry point for CLI logger usage (no DI required)\r\nimport { CLILogger } from './CLILogger';\r\n\r\nexport class CLILoggerFacade {\r\n  private logger: CLILogger;\r\n\r\n  constructor() {\r\n    this.logger = new CLILogger();\r\n  }\r\n\r\n  log(message: string, meta?: Record<string, unknown>) {\r\n    this.logger.log(message, meta);\r\n  }\r\n\r\n  error(message: string, meta?: Record<string, unknown>) {\r\n    this.logger.error(message, meta);\r\n  }\r\n\r\n  warn(message: string, meta?: Record<string, unknown>) {\r\n    this.logger.warn(message, meta);\r\n  }\r\n\r\n  plainLog(message: string, meta?: Record<string, unknown>) {\r\n    this.logger.plainLog(message, meta);\r\n  }\r\n\r\n  // Note: warn and debug methods are intentionally not exposed\r\n  // to keep CLI output clean and user-friendly\r\n} "],
  "mappings": "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",
  "names": ["ErrorCode", "path", "path", "path", "getDefaultConfig", "fs", "path", "TEMP_SUFFIX", "BACKUP_SUFFIX", "path", "fs", "path", "fs", "path", "path", "platform", "fs", "resolve", "process", "path", "platform", "platform", "path", "path"]
}
